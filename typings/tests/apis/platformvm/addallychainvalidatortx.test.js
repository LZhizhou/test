"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const platformvm_1 = require("src/apis/platformvm");
const utils_1 = require("src/utils");
describe("AddAllychainValidatorTx", () => {
    const addAllychainValidatorTxHex = "0000053900000000000000000000000000000000000000000000000000000000000000000000000117cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000007006a94d71389b180000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b00000001f7fc296b05e7a960e9d2739c1cabdb58f22e5c582e1a7b0877fb10e78cf4e7ec0000000017cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000005006a94d71398f3c00000000100000000000000934d616e75616c6c79206372656174652061204164645375626e657456616c696461746f7254782077686963682063726561746573206120312d6f662d322041564158207574786f20616e64206164647320612076616c696461746f7220746f2061207375626e657420627920636f72726563746c79207369676e696e672074686520322d6f662d33205375626e657441757468de31b4d8b22991d51aa6aa1fc733f23a851a8c94000000006279e79c00000000628d873a00000000000000017fe044f9e97347c0a5ffe5a0f5773b42398c0e2b85948616da681585d460e1a80000000a000000020000000000000001";
    const addAllychainValidatorTxBuf = buffer_1.Buffer.from(addAllychainValidatorTxHex, "hex");
    const addAllychainValidatorTx = new platformvm_1.AddAllychainValidatorTx();
    addAllychainValidatorTx.fromBuffer(addAllychainValidatorTxBuf);
    test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
        const addAllychainValidatorTxTypeName = addAllychainValidatorTx.getTypeName();
        expect(addAllychainValidatorTxTypeName).toBe("AddAllychainValidatorTx");
    }));
    test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
        const addAllychainValidatorTxTypeID = addAllychainValidatorTx.getTypeID();
        expect(addAllychainValidatorTxTypeID).toBe(platformvm_1.PlatformVMConstants.ADDALLYCHAINVALIDATORTX);
    }));
    test("toBuffer and fromBuffer", () => __awaiter(void 0, void 0, void 0, function* () {
        const buf = addAllychainValidatorTx.toBuffer();
        const asvTx = new platformvm_1.AddAllychainValidatorTx();
        asvTx.fromBuffer(buf);
        const buf2 = asvTx.toBuffer();
        expect(buf.toString("hex")).toBe(buf2.toString("hex"));
    }));
    test("getNodeID", () => __awaiter(void 0, void 0, void 0, function* () {
        const nodeID = "NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ";
        const nodeIDBuf = addAllychainValidatorTx.getNodeID();
        const nID = (0, utils_1.bufferToNodeIDString)(nodeIDBuf);
        expect(nID).toBe(nodeID);
    }));
    test("getStartTime", () => __awaiter(void 0, void 0, void 0, function* () {
        const startTime = new bn_js_1.default(1652156316);
        const st = addAllychainValidatorTx.getStartTime();
        expect(startTime.toString()).toBe(st.toString());
    }));
    test("getEndTime", () => __awaiter(void 0, void 0, void 0, function* () {
        const endTime = new bn_js_1.default(1653442362);
        const et = addAllychainValidatorTx.getEndTime();
        expect(endTime.toString()).toBe(et.toString());
    }));
    test("getWeight", () => __awaiter(void 0, void 0, void 0, function* () {
        const weight = new bn_js_1.default(1);
        const w = addAllychainValidatorTx.getWeight();
        expect(weight.toString()).toBe(w.toString());
    }));
    test("getAllychainID", () => __awaiter(void 0, void 0, void 0, function* () {
        const allychainID = "yKRV4EvGYWj7HHXUxSYzaAQVazEvaFPKPhJie4paqbrML5dub";
        const sID = addAllychainValidatorTx.getAllychainID();
        expect(allychainID).toBe(sID);
    }));
    describe("AllychainAuth", () => {
        const sa = addAllychainValidatorTx.getAllychainAuth();
        test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
            const allychainAuthTypeName = sa.getTypeName();
            expect(allychainAuthTypeName).toBe("AllychainAuth");
        }));
        test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
            const allychainAuthTypeID = sa.getTypeID();
            expect(allychainAuthTypeID).toBe(platformvm_1.PlatformVMConstants.ALLYCHAINAUTH);
        }));
        test("getNumAddressIndices", () => __awaiter(void 0, void 0, void 0, function* () {
            const numAddressIndices = sa.getNumAddressIndices();
            const nAI = 2;
            expect(numAddressIndices).toBe(nAI);
        }));
        test("addressIndices", () => __awaiter(void 0, void 0, void 0, function* () {
            const ai = [0, 1];
            const addressIndices = sa.getAddressIndices();
            addressIndices.forEach((addressIndex, index) => {
                expect(addressIndex.readInt32BE(0)).toBe(ai[index]);
            });
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,