"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const outputs_1 = require("../../../src/apis/platformvm/outputs");
const output_1 = require("../../../src/common/output");
const bintools = bintools_1.default.getInstance();
describe("Outputs", () => {
    describe("SECPTransferOutput", () => {
        const addrs = [
            bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
            bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
            bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
        ].sort();
        const locktime = new bn_js_1.default(54321);
        const addrpay = [addrs[0], addrs[1]];
        const fallLocktime = locktime.add(new bn_js_1.default(50));
        test("SelectOutputClass", () => {
            const goodout = new outputs_1.SECPTransferOutput(new bn_js_1.default(2600), addrpay, fallLocktime, 1);
            const outpayment = (0, outputs_1.SelectOutputClass)(goodout.getOutputID());
            expect(outpayment).toBeInstanceOf(outputs_1.SECPTransferOutput);
            expect(() => {
                (0, outputs_1.SelectOutputClass)(99);
            }).toThrow("Error - SelectOutputClass: unknown outputid");
        });
        test("comparator", () => {
            const outpayment1 = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            const outpayment2 = new outputs_1.SECPTransferOutput(new bn_js_1.default(10001), addrs, locktime, 3);
            const outpayment3 = new outputs_1.SECPTransferOutput(new bn_js_1.default(9999), addrs, locktime, 3);
            const cmp = output_1.Output.comparator();
            expect(cmp(outpayment1, outpayment1)).toBe(0);
            expect(cmp(outpayment2, outpayment2)).toBe(0);
            expect(cmp(outpayment3, outpayment3)).toBe(0);
            expect(cmp(outpayment1, outpayment2)).toBe(-1);
            expect(cmp(outpayment1, outpayment3)).toBe(1);
        });
        test("SECPTransferOutput", () => {
            const out = new outputs_1.SECPTransferOutput(new bn_js_1.default(10000), addrs, locktime, 3);
            expect(out.getOutputID()).toBe(7);
            expect(JSON.stringify(out.getAddresses().sort())).toStrictEqual(JSON.stringify(addrs.sort()));
            expect(out.getThreshold()).toBe(3);
            expect(out.getLocktime().toNumber()).toBe(locktime.toNumber());
            const r = out.getAddressIdx(addrs[2]);
            expect(out.getAddress(r)).toStrictEqual(addrs[2]);
            expect(() => {
                out.getAddress(400);
            }).toThrow();
            expect(out.getAmount().toNumber()).toBe(10000);
            const b = out.toBuffer();
            expect(out.toString()).toBe(bintools.bufferToB58(b));
            const s = out.getSpenders(addrs);
            expect(JSON.stringify(s.sort())).toBe(JSON.stringify(addrs.sort()));
            const m1 = out.meetsThreshold([addrs[0]]);
            expect(m1).toBe(false);
            const m2 = out.meetsThreshold(addrs, new bn_js_1.default(100));
            expect(m2).toBe(false);
            const m3 = out.meetsThreshold(addrs);
            expect(m3).toBe(true);
            const m4 = out.meetsThreshold(addrs, locktime.add(new bn_js_1.default(100)));
            expect(m4).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,