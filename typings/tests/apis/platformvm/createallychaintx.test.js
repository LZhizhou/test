"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer/");
const constants_1 = require("../../../src/apis/platformvm/constants");
const platformvm_1 = require("src/apis/platformvm");
describe("CreateAllychainTx", () => {
    const createAllychainTxHex = "0000053900000000000000000000000000000000000000000000000000000000000000000000000117cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000007006a94d69c2656c0000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b00000001ec7f57aeda7824b9d785e5ca631d96ef7323988a9fcfc6832cbc73ac4b27f7040000000017cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000005006a94d6d7c120c00000000100000000000000594d616e75616c6c79206372656174652061204372656174655375626e657454782077686963682063726561746573206120312d6f662d322041564158207574786f20616e64206120322d6f662d33205375626e6574417574680000000b000000000000000000000002000000035c412ef1414c4903c49dffc0ba9286c47fa27689a43c1f6ecdcb1fcec86d78446b9cf619c64c604be6b2bba9288c499d477327292839728ab52e902c";
    const createAllychainTxBuf = buffer_1.Buffer.from(createAllychainTxHex, "hex");
    const createAllychainTx = new platformvm_1.CreateAllychainTx();
    createAllychainTx.fromBuffer(createAllychainTxBuf);
    test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
        const createAllychainTxTypeName = createAllychainTx.getTypeName();
        expect(createAllychainTxTypeName).toBe("CreateAllychainTx");
    }));
    test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
        const createAllychainTxTypeID = createAllychainTx.getTypeID();
        expect(createAllychainTxTypeID).toBe(constants_1.PlatformVMConstants.CREATEALLYCHAINTX);
    }));
    test("toBuffer and fromBuffer", () => __awaiter(void 0, void 0, void 0, function* () {
        const buf = createAllychainTx.toBuffer();
        const csTx = new platformvm_1.CreateAllychainTx();
        csTx.fromBuffer(buf);
        const buf2 = csTx.toBuffer();
        expect(buf.toString("hex")).toBe(buf2.toString("hex"));
    }));
    describe("AllychainOwners", () => {
        const allychainOwners = createAllychainTx.getAllychainOwners();
        test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
            const allychainOwnersTypeName = allychainOwners.getTypeName();
            expect(allychainOwnersTypeName).toBe("SECPOwnerOutput");
        }));
        test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
            const allychainOwnersTypeID = allychainOwners.getTypeID();
            expect(allychainOwnersTypeID).toBe(constants_1.PlatformVMConstants.SECPOWNEROUTPUTID);
        }));
        test("getOutputID", () => __awaiter(void 0, void 0, void 0, function* () {
            const outputID = allychainOwners.getOutputID();
            expect(outputID).toBe(constants_1.PlatformVMConstants.SECPOWNEROUTPUTID);
        }));
        test("get addresses", () => __awaiter(void 0, void 0, void 0, function* () {
            const addresses = allychainOwners.getAddresses();
            expect(addresses.length).toBe(3);
        }));
        test("get threshold", () => __awaiter(void 0, void 0, void 0, function* () {
            const threshold = allychainOwners.getThreshold();
            expect(threshold).toBe(2);
        }));
        test("get locktime", () => __awaiter(void 0, void 0, void 0, function* () {
            const locktime = allychainOwners.getLocktime();
            expect(locktime.toNumber()).toBe(0);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlYWxseWNoYWludHgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3RzL2FwaXMvcGxhdGZvcm12bS9jcmVhdGVhbGx5Y2hhaW50eC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0Esb0NBQWdDO0FBRWhDLHNFQUE0RTtBQUM1RSxvREFBdUQ7QUFFdkQsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQVMsRUFBRTtJQUN2QyxNQUFNLG9CQUFvQixHQUN4Qiw0eUJBQTR5QixDQUFBO0lBQzl5QixNQUFNLG9CQUFvQixHQUFXLGVBQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDN0UsTUFBTSxpQkFBaUIsR0FBc0IsSUFBSSw4QkFBaUIsRUFBRSxDQUFBO0lBQ3BFLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO0lBRWxELElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBd0IsRUFBRTtRQUM1QyxNQUFNLHlCQUF5QixHQUFXLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQ3pFLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQzdELENBQUMsQ0FBQSxDQUFDLENBQUE7SUFFRixJQUFJLENBQUMsV0FBVyxFQUFFLEdBQXdCLEVBQUU7UUFDMUMsTUFBTSx1QkFBdUIsR0FBVyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNyRSxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUM3RSxDQUFDLENBQUEsQ0FBQyxDQUFBO0lBRUYsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQXdCLEVBQUU7UUFDeEQsTUFBTSxHQUFHLEdBQVcsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDaEQsTUFBTSxJQUFJLEdBQXNCLElBQUksOEJBQWlCLEVBQUUsQ0FBQTtRQUN2RCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sSUFBSSxHQUFXLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7SUFDeEQsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUVGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFTLEVBQUU7UUFDckMsTUFBTSxlQUFlLEdBQ25CLGlCQUFpQixDQUFDLGtCQUFrQixFQUFFLENBQUE7UUFFeEMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUF3QixFQUFFO1lBQzVDLE1BQU0sdUJBQXVCLEdBQVcsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFBO1lBQ3JFLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQ3pELENBQUMsQ0FBQSxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsV0FBVyxFQUFFLEdBQXdCLEVBQUU7WUFDMUMsTUFBTSxxQkFBcUIsR0FBVyxlQUFlLENBQUMsU0FBUyxFQUFFLENBQUE7WUFDakUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUFtQixDQUFDLGlCQUFpQixDQUFDLENBQUE7UUFDM0UsQ0FBQyxDQUFBLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBd0IsRUFBRTtZQUM1QyxNQUFNLFFBQVEsR0FBVyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDdEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1FBQzlELENBQUMsQ0FBQSxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsZUFBZSxFQUFFLEdBQXdCLEVBQUU7WUFDOUMsTUFBTSxTQUFTLEdBQWEsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQzFELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xDLENBQUMsQ0FBQSxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsZUFBZSxFQUFFLEdBQXdCLEVBQUU7WUFDOUMsTUFBTSxTQUFTLEdBQVcsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFBO1lBQ3hELE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDM0IsQ0FBQyxDQUFBLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBd0IsRUFBRTtZQUM3QyxNQUFNLFFBQVEsR0FBTyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDbEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNyQyxDQUFDLENBQUEsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCTiBmcm9tIFwiYm4uanNcIlxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxuaW1wb3J0IHsgU0VDUE93bmVyT3V0cHV0IH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9hcGlzL3BsYXRmb3Jtdm0vb3V0cHV0c1wiXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9hcGlzL3BsYXRmb3Jtdm0vY29uc3RhbnRzXCJcbmltcG9ydCB7IENyZWF0ZUFsbHljaGFpblR4IH0gZnJvbSBcInNyYy9hcGlzL3BsYXRmb3Jtdm1cIlxuXG5kZXNjcmliZShcIkNyZWF0ZUFsbHljaGFpblR4XCIsICgpOiB2b2lkID0+IHtcbiAgY29uc3QgY3JlYXRlQWxseWNoYWluVHhIZXg6IHN0cmluZyA9XG4gICAgXCIwMDAwMDUzOTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTE3Y2M4YjE1NzhiYTM4MzU0NGQxNjM5NTg4MjJkOGFiZDM4NDliYjlkZmFiZTM5ZmNiYzNlN2VlODgxMWZlMmYwMDAwMDAwNzAwNmE5NGQ2OWMyNjU2YzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMjNjYjdkMzg0MmU4Y2VlNmEwZWJkMDlmMWZlODg0ZjY4NjFlMWIyOWNhNDNjMWY2ZWNkY2IxZmNlYzg2ZDc4NDQ2YjljZjYxOWM2NGM2MDRiMDAwMDAwMDFlYzdmNTdhZWRhNzgyNGI5ZDc4NWU1Y2E2MzFkOTZlZjczMjM5ODhhOWZjZmM2ODMyY2JjNzNhYzRiMjdmNzA0MDAwMDAwMDAxN2NjOGIxNTc4YmEzODM1NDRkMTYzOTU4ODIyZDhhYmQzODQ5YmI5ZGZhYmUzOWZjYmMzZTdlZTg4MTFmZTJmMDAwMDAwMDUwMDZhOTRkNmQ3YzEyMGMwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDU5NGQ2MTZlNzU2MTZjNmM3OTIwNjM3MjY1NjE3NDY1MjA2MTIwNDM3MjY1NjE3NDY1NTM3NTYyNmU2NTc0NTQ3ODIwNzc2ODY5NjM2ODIwNjM3MjY1NjE3NDY1NzMyMDYxMjAzMTJkNmY2NjJkMzIyMDQxNTY0MTU4MjA3NTc0Nzg2ZjIwNjE2ZTY0MjA2MTIwMzIyZDZmNjYyZDMzMjA1Mzc1NjI2ZTY1NzQ0MTc1NzQ2ODAwMDAwMDBiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDM1YzQxMmVmMTQxNGM0OTAzYzQ5ZGZmYzBiYTkyODZjNDdmYTI3Njg5YTQzYzFmNmVjZGNiMWZjZWM4NmQ3ODQ0NmI5Y2Y2MTljNjRjNjA0YmU2YjJiYmE5Mjg4YzQ5OWQ0NzczMjcyOTI4Mzk3MjhhYjUyZTkwMmNcIlxuICBjb25zdCBjcmVhdGVBbGx5Y2hhaW5UeEJ1ZjogQnVmZmVyID0gQnVmZmVyLmZyb20oY3JlYXRlQWxseWNoYWluVHhIZXgsIFwiaGV4XCIpXG4gIGNvbnN0IGNyZWF0ZUFsbHljaGFpblR4OiBDcmVhdGVBbGx5Y2hhaW5UeCA9IG5ldyBDcmVhdGVBbGx5Y2hhaW5UeCgpXG4gIGNyZWF0ZUFsbHljaGFpblR4LmZyb21CdWZmZXIoY3JlYXRlQWxseWNoYWluVHhCdWYpXG5cbiAgdGVzdChcImdldFR5cGVOYW1lXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBjcmVhdGVBbGx5Y2hhaW5UeFR5cGVOYW1lOiBzdHJpbmcgPSBjcmVhdGVBbGx5Y2hhaW5UeC5nZXRUeXBlTmFtZSgpXG4gICAgZXhwZWN0KGNyZWF0ZUFsbHljaGFpblR4VHlwZU5hbWUpLnRvQmUoXCJDcmVhdGVBbGx5Y2hhaW5UeFwiKVxuICB9KVxuXG4gIHRlc3QoXCJnZXRUeXBlSURcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IGNyZWF0ZUFsbHljaGFpblR4VHlwZUlEOiBudW1iZXIgPSBjcmVhdGVBbGx5Y2hhaW5UeC5nZXRUeXBlSUQoKVxuICAgIGV4cGVjdChjcmVhdGVBbGx5Y2hhaW5UeFR5cGVJRCkudG9CZShQbGF0Zm9ybVZNQ29uc3RhbnRzLkNSRUFURUFMTFlDSEFJTlRYKVxuICB9KVxuXG4gIHRlc3QoXCJ0b0J1ZmZlciBhbmQgZnJvbUJ1ZmZlclwiLCBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgYnVmOiBCdWZmZXIgPSBjcmVhdGVBbGx5Y2hhaW5UeC50b0J1ZmZlcigpXG4gICAgY29uc3QgY3NUeDogQ3JlYXRlQWxseWNoYWluVHggPSBuZXcgQ3JlYXRlQWxseWNoYWluVHgoKVxuICAgIGNzVHguZnJvbUJ1ZmZlcihidWYpXG4gICAgY29uc3QgYnVmMjogQnVmZmVyID0gY3NUeC50b0J1ZmZlcigpXG4gICAgZXhwZWN0KGJ1Zi50b1N0cmluZyhcImhleFwiKSkudG9CZShidWYyLnRvU3RyaW5nKFwiaGV4XCIpKVxuICB9KVxuXG4gIGRlc2NyaWJlKFwiQWxseWNoYWluT3duZXJzXCIsICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBhbGx5Y2hhaW5Pd25lcnM6IFNFQ1BPd25lck91dHB1dCA9XG4gICAgICBjcmVhdGVBbGx5Y2hhaW5UeC5nZXRBbGx5Y2hhaW5Pd25lcnMoKVxuXG4gICAgdGVzdChcImdldFR5cGVOYW1lXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IGFsbHljaGFpbk93bmVyc1R5cGVOYW1lOiBzdHJpbmcgPSBhbGx5Y2hhaW5Pd25lcnMuZ2V0VHlwZU5hbWUoKVxuICAgICAgZXhwZWN0KGFsbHljaGFpbk93bmVyc1R5cGVOYW1lKS50b0JlKFwiU0VDUE93bmVyT3V0cHV0XCIpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXRUeXBlSURcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3QgYWxseWNoYWluT3duZXJzVHlwZUlEOiBudW1iZXIgPSBhbGx5Y2hhaW5Pd25lcnMuZ2V0VHlwZUlEKClcbiAgICAgIGV4cGVjdChhbGx5Y2hhaW5Pd25lcnNUeXBlSUQpLnRvQmUoUGxhdGZvcm1WTUNvbnN0YW50cy5TRUNQT1dORVJPVVRQVVRJRClcbiAgICB9KVxuXG4gICAgdGVzdChcImdldE91dHB1dElEXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dElEOiBudW1iZXIgPSBhbGx5Y2hhaW5Pd25lcnMuZ2V0T3V0cHV0SUQoKVxuICAgICAgZXhwZWN0KG91dHB1dElEKS50b0JlKFBsYXRmb3JtVk1Db25zdGFudHMuU0VDUE9XTkVST1VUUFVUSUQpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXQgYWRkcmVzc2VzXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IGFkZHJlc3NlczogQnVmZmVyW10gPSBhbGx5Y2hhaW5Pd25lcnMuZ2V0QWRkcmVzc2VzKClcbiAgICAgIGV4cGVjdChhZGRyZXNzZXMubGVuZ3RoKS50b0JlKDMpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXQgdGhyZXNob2xkXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IHRocmVzaG9sZDogbnVtYmVyID0gYWxseWNoYWluT3duZXJzLmdldFRocmVzaG9sZCgpXG4gICAgICBleHBlY3QodGhyZXNob2xkKS50b0JlKDIpXG4gICAgfSlcblxuICAgIHRlc3QoXCJnZXQgbG9ja3RpbWVcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3QgbG9ja3RpbWU6IEJOID0gYWxseWNoYWluT3duZXJzLmdldExvY2t0aW1lKClcbiAgICAgIGV4cGVjdChsb2NrdGltZS50b051bWJlcigpKS50b0JlKDApXG4gICAgfSlcbiAgfSlcbn0pXG4iXX0=