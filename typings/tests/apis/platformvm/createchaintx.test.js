"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const buffer_1 = require("buffer/");
const constants_1 = require("../../../src/apis/platformvm/constants");
const index_1 = require("../../../src/index");
const platformvm_1 = require("src/apis/platformvm");
describe("CreateChainTx", () => {
    /**
     * @ignore
     */
    const bintools = bintools_1.default.getInstance();
    const createChainTxHex = "0000053900000000000000000000000000000000000000000000000000000000000000000000000117cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000007006a94d6d80d6c00000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b000000017fe044f9e97347c0a5ffe5a0f5773b42398c0e2b85948616da681585d460e1a80000000017cc8b1578ba383544d163958822d8abd3849bb9dfabe39fcbc3e7ee8811fe2f00000005006a94d713a836000000000100000000000000934d616e75616c6c7920637265617465206120437265617465436861696e54782077686963682063726561746573206120312d6f662d322041564158207574786f20616e6420696e7374616e746961746573206120564d20696e746f206120626c6f636b636861696e20627920636f72726563746c79207369676e696e672074686520322d6f662d33205375626e6574417574687fe044f9e97347c0a5ffe5a0f5773b42398c0e2b85948616da681585d460e1a80008455049432041564d61766d0000000000000000000000000000000000000000000000000000000000000000036e6674667800000000000000000000000000000000000000000000000000000070726f7065727479667800000000000000000000000000000000000000000000736563703235366b3166780000000000000000000000000000000000000000000000013c000000000001000e4173736574416c696173546573740000053900000000000000000000000000000000000000000000000000000000000000000000000000000000000000934d616e75616c6c7920637265617465206120437265617465436861696e54782077686963682063726561746573206120312d6f662d322041564158207574786f20616e6420696e7374616e746961746573206120564d20696e746f206120626c6f636b636861696e20627920636f72726563746c79207369676e696e672074686520322d6f662d33205375626e657441757468000a54657374204173736574000454455354000000000100000000000000010000000700000000000001fb000000000000000000000001000000023cb7d3842e8cee6a0ebd09f1fe884f6861e1b29ca43c1f6ecdcb1fcec86d78446b9cf619c64c604b0000000a000000020000000000000001";
    const createChainTxBuf = buffer_1.Buffer.from(createChainTxHex, "hex");
    const createChainTx = new platformvm_1.CreateChainTx();
    createChainTx.fromBuffer(createChainTxBuf);
    test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
        const createChainTxTypeName = createChainTx.getTypeName();
        expect(createChainTxTypeName).toBe("CreateChainTx");
    }));
    test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
        const createChainTxTypeID = createChainTx.getTypeID();
        expect(createChainTxTypeID).toBe(constants_1.PlatformVMConstants.CREATECHAINTX);
    }));
    test("toBuffer and fromBuffer", () => __awaiter(void 0, void 0, void 0, function* () {
        const buf = createChainTx.toBuffer();
        const ccTx = new platformvm_1.CreateChainTx();
        ccTx.fromBuffer(buf);
        const buf2 = ccTx.toBuffer();
        expect(buf.toString("hex")).toBe(buf2.toString("hex"));
    }));
    test("getAllychainID", () => {
        const snID = "yKRV4EvGYWj7HHXUxSYzaAQVazEvaFPKPhJie4paqbrML5dub";
        const allychainID = createChainTx.getAllychainID();
        expect(allychainID).toBe(snID);
    });
    test("getChainName", () => {
        const cn = "EPIC AVM";
        const chainName = createChainTx.getChainName();
        expect(chainName).toBe(cn);
    });
    test("getVMID", () => {
        const vmIDHex = "61766d0000000000000000000000000000000000000000000000000000000000";
        const vmID = createChainTx.getVMID().toString("hex");
        expect(vmID).toBe(vmIDHex);
    });
    test("getFXIDs", () => {
        const fxIDsHex = [
            "6e66746678000000000000000000000000000000000000000000000000000000",
            "70726f7065727479667800000000000000000000000000000000000000000000",
            "736563703235366b316678000000000000000000000000000000000000000000"
        ];
        const fxIDs = createChainTx.getFXIDs();
        expect(fxIDs.length).toBe(3);
        fxIDs.forEach((fxID, index) => {
            expect(fxID.toString("hex")).toBe(fxIDsHex[index]);
        });
    });
    test("getGenesisData", () => {
        const gd = createChainTx.getGenesisData();
        const genesisData = new index_1.GenesisData();
        const buf = bintools.cb58Decode(gd);
        genesisData.fromBuffer(buf);
        const genesisAssets = genesisData.getGenesisAssets();
        const genesisAsset = genesisAssets[0];
        const n = "Test Asset";
        const name = genesisAsset.getName();
        expect(name).toBe(n);
        const s = "TEST";
        const symbol = genesisAsset.getSymbol();
        expect(symbol).toBe(s);
        const d = 0;
        const denomination = genesisAsset.getDenomination();
        expect(denomination).toBe(d);
    });
    describe("AllychainAuth", () => {
        const sa = createChainTx.getAllychainAuth();
        test("getTypeName", () => __awaiter(void 0, void 0, void 0, function* () {
            const allychainAuthTypeName = sa.getTypeName();
            expect(allychainAuthTypeName).toBe("AllychainAuth");
        }));
        test("getTypeID", () => __awaiter(void 0, void 0, void 0, function* () {
            const allychainAuthTypeID = sa.getTypeID();
            expect(allychainAuthTypeID).toBe(constants_1.PlatformVMConstants.ALLYCHAINAUTH);
        }));
        test("getNumAddressIndices", () => __awaiter(void 0, void 0, void 0, function* () {
            const numAddressIndices = sa.getNumAddressIndices();
            const nAI = 2;
            expect(numAddressIndices).toBe(nAI);
        }));
        test("addressIndices", () => __awaiter(void 0, void 0, void 0, function* () {
            const ai = [0, 1];
            const addressIndices = sa.getAddressIndices();
            addressIndices.forEach((addressIndex, index) => {
                expect(addressIndex.readInt32BE(0)).toBe(ai[index]);
            });
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlY2hhaW50eC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdHMvYXBpcy9wbGF0Zm9ybXZtL2NyZWF0ZWNoYWludHgudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLDJFQUFrRDtBQUNsRCxvQ0FBZ0M7QUFDaEMsc0VBQTRFO0FBQzVFLDhDQUE4RDtBQUM5RCxvREFBa0U7QUFFbEUsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFTLEVBQUU7SUFDbkM7O09BRUc7SUFDSCxNQUFNLFFBQVEsR0FBYSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBRWpELE1BQU0sZ0JBQWdCLEdBQ3BCLDR2REFBNHZELENBQUE7SUFDOXZELE1BQU0sZ0JBQWdCLEdBQVcsZUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUNyRSxNQUFNLGFBQWEsR0FBa0IsSUFBSSwwQkFBYSxFQUFFLENBQUE7SUFDeEQsYUFBYSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBRTFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBd0IsRUFBRTtRQUM1QyxNQUFNLHFCQUFxQixHQUFXLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNqRSxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7SUFDckQsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBd0IsRUFBRTtRQUMxQyxNQUFNLG1CQUFtQixHQUFXLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUM3RCxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQW1CLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDckUsQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUF3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RUYsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQXdCLEVBQUU7WUFDL0MsTUFBTSxFQUFFLEdBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDM0IsTUFBTSxjQUFjLEdBQWEsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUE7WUFDdkQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQW9CLEVBQUUsS0FBYSxFQUFFLEVBQUU7Z0JBQzdELE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1lBQ3JELENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFBLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmluVG9vbHMgZnJvbSBcIi4uLy4uLy4uL3NyYy91dGlscy9iaW50b29sc1wiXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyL1wiXG5pbXBvcnQgeyBQbGF0Zm9ybVZNQ29uc3RhbnRzIH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9hcGlzL3BsYXRmb3Jtdm0vY29uc3RhbnRzXCJcbmltcG9ydCB7IEdlbmVzaXNBc3NldCwgR2VuZXNpc0RhdGEgfSBmcm9tIFwiLi4vLi4vLi4vc3JjL2luZGV4XCJcbmltcG9ydCB7IENyZWF0ZUNoYWluVHgsIEFsbHljaGFpbkF1dGggfSBmcm9tIFwic3JjL2FwaXMvcGxhdGZvcm12bVwiXG5cbmRlc2NyaWJlKFwiQ3JlYXRlQ2hhaW5UeFwiLCAoKTogdm9pZCA9PiB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5cbiAgY29uc3QgY3JlYXRlQ2hhaW5UeEhleDogc3RyaW5nID1cbiAgICBcIjAwMDAwNTM5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMTdjYzhiMTU3OGJhMzgzNTQ0ZDE2Mzk1ODgyMmQ4YWJkMzg0OWJiOWRmYWJlMzlmY2JjM2U3ZWU4ODExZmUyZjAwMDAwMDA3MDA2YTk0ZDZkODBkNmMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMTAwMDAwMDAyM2NiN2QzODQyZThjZWU2YTBlYmQwOWYxZmU4ODRmNjg2MWUxYjI5Y2E0M2MxZjZlY2RjYjFmY2VjODZkNzg0NDZiOWNmNjE5YzY0YzYwNGIwMDAwMDAwMTdmZTA0NGY5ZTk3MzQ3YzBhNWZmZTVhMGY1NzczYjQyMzk4YzBlMmI4NTk0ODYxNmRhNjgxNTg1ZDQ2MGUxYTgwMDAwMDAwMDE3Y2M4YjE1NzhiYTM4MzU0NGQxNjM5NTg4MjJkOGFiZDM4NDliYjlkZmFiZTM5ZmNiYzNlN2VlODgxMWZlMmYwMDAwMDAwNTAwNmE5NGQ3MTNhODM2MDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwOTM0ZDYxNmU3NTYxNmM2Yzc5MjA2MzcyNjU2MTc0NjUyMDYxMjA0MzcyNjU2MTc0NjU0MzY4NjE2OTZlNTQ3ODIwNzc2ODY5NjM2ODIwNjM3MjY1NjE3NDY1NzMyMDYxMjAzMTJkNmY2NjJkMzIyMDQxNTY0MTU4MjA3NTc0Nzg2ZjIwNjE2ZTY0MjA2OTZlNzM3NDYxNmU3NDY5NjE3NDY1NzMyMDYxMjA1NjRkMjA2OTZlNzQ2ZjIwNjEyMDYyNmM2ZjYzNmI2MzY4NjE2OTZlMjA2Mjc5MjA2MzZmNzI3MjY1NjM3NDZjNzkyMDczNjk2NzZlNjk2ZTY3MjA3NDY4NjUyMDMyMmQ2ZjY2MmQzMzIwNTM3NTYyNmU2NTc0NDE3NTc0Njg3ZmUwNDRmOWU5NzM0N2MwYTVmZmU1YTBmNTc3M2I0MjM5OGMwZTJiODU5NDg2MTZkYTY4MTU4NWQ0NjBlMWE4MDAwODQ1NTA0OTQzMjA0MTU2NGQ2MTc2NmQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDM2ZTY2NzQ2Njc4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNzA3MjZmNzA2NTcyNzQ3OTY2NzgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDczNjU2MzcwMzIzNTM2NmIzMTY2NzgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEzYzAwMDAwMDAwMDAwMTAwMGU0MTczNzM2NTc0NDE2YzY5NjE3MzU0NjU3Mzc0MDAwMDA1MzkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDkzNGQ2MTZlNzU2MTZjNmM3OTIwNjM3MjY1NjE3NDY1MjA2MTIwNDM3MjY1NjE3NDY1NDM2ODYxNjk2ZTU0NzgyMDc3Njg2OTYzNjgyMDYzNzI2NTYxNzQ2NTczMjA2MTIwMzEyZDZmNjYyZDMyMjA0MTU2NDE1ODIwNzU3NDc4NmYyMDYxNmU2NDIwNjk2ZTczNzQ2MTZlNzQ2OTYxNzQ2NTczMjA2MTIwNTY0ZDIwNjk2ZTc0NmYyMDYxMjA2MjZjNmY2MzZiNjM2ODYxNjk2ZTIwNjI3OTIwNjM2ZjcyNzI2NTYzNzQ2Yzc5MjA3MzY5Njc2ZTY5NmU2NzIwNzQ2ODY1MjAzMjJkNmY2NjJkMzMyMDUzNzU2MjZlNjU3NDQxNzU3NDY4MDAwYTU0NjU3Mzc0MjA0MTczNzM2NTc0MDAwNDU0NDU1MzU0MDAwMDAwMDAwMTAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwNzAwMDAwMDAwMDAwMDAxZmIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMjNjYjdkMzg0MmU4Y2VlNmEwZWJkMDlmMWZlODg0ZjY4NjFlMWIyOWNhNDNjMWY2ZWNkY2IxZmNlYzg2ZDc4NDQ2YjljZjYxOWM2NGM2MDRiMDAwMDAwMGEwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDFcIlxuICBjb25zdCBjcmVhdGVDaGFpblR4QnVmOiBCdWZmZXIgPSBCdWZmZXIuZnJvbShjcmVhdGVDaGFpblR4SGV4LCBcImhleFwiKVxuICBjb25zdCBjcmVhdGVDaGFpblR4OiBDcmVhdGVDaGFpblR4ID0gbmV3IENyZWF0ZUNoYWluVHgoKVxuICBjcmVhdGVDaGFpblR4LmZyb21CdWZmZXIoY3JlYXRlQ2hhaW5UeEJ1ZilcblxuICB0ZXN0KFwiZ2V0VHlwZU5hbWVcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IGNyZWF0ZUNoYWluVHhUeXBlTmFtZTogc3RyaW5nID0gY3JlYXRlQ2hhaW5UeC5nZXRUeXBlTmFtZSgpXG4gICAgZXhwZWN0KGNyZWF0ZUNoYWluVHhUeXBlTmFtZSkudG9CZShcIkNyZWF0ZUNoYWluVHhcIilcbiAgfSlcblxuICB0ZXN0KFwiZ2V0VHlwZUlEXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBjcmVhdGVDaGFpblR4VHlwZUlEOiBudW1iZXIgPSBjcmVhdGVDaGFpblR4LmdldFR5cGVJRCgpXG4gICAgZXhwZWN0KGNyZWF0ZUNoYWluVHhUeXBlSUQpLnRvQmUoUGxhdGZvcm1WTUNvbnN0YW50cy5DUkVBVEVDSEFJTlRYKVxuICB9KVxuXG4gIHRlc3QoXCJ0b0J1ZmZlciBhbmQgZnJvbUJ1ZmZlclwiLCBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgYnVmOiBCdWZmZXIgPSBjcmVhdGVDaGFpblR4LnRvQnVmZmVyKClcbiAgICBjb25zdCBjY1R4OiBDcmVhdGVDaGFpblR4ID0gbmV3IENyZWF0ZUNoYWluVHgoKVxuICAgIGNjVHguZnJvbUJ1ZmZlcihidWYpXG4gICAgY29uc3QgYnVmMjogQnVmZmVyID0gY2NUeC50b0J1ZmZlcigpXG4gICAgZXhwZWN0KGJ1Zi50b1N0cmluZyhcImhleFwiKSkudG9CZShidWYyLnRvU3RyaW5nKFwiaGV4XCIpKVxuICB9KVxuXG4gIHRlc3QoXCJnZXRBbGx5Y2hhaW5JRFwiLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3Qgc25JRDogc3RyaW5nID0gXCJ5S1JWNEV2R1lXajdISFhVeFNZemFBUVZhekV2YUZQS1BoSmllNHBhcWJyTUw1ZHViXCJcbiAgICBjb25zdCBhbGx5Y2hhaW5JRDogc3RyaW5nID0gY3JlYXRlQ2hhaW5UeC5nZXRBbGx5Y2hhaW5JRCgpXG4gICAgZXhwZWN0KGFsbHljaGFpbklEKS50b0JlKHNuSUQpXG4gIH0pXG5cbiAgdGVzdChcImdldENoYWluTmFtZVwiLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgY246IHN0cmluZyA9IFwiRVBJQyBBVk1cIlxuICAgIGNvbnN0IGNoYWluTmFtZTogc3RyaW5nID0gY3JlYXRlQ2hhaW5UeC5nZXRDaGFpbk5hbWUoKVxuICAgIGV4cGVjdChjaGFpbk5hbWUpLnRvQmUoY24pXG4gIH0pXG5cbiAgdGVzdChcImdldFZNSURcIiwgKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHZtSURIZXg6IHN0cmluZyA9XG4gICAgICBcIjYxNzY2ZDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIlxuICAgIGNvbnN0IHZtSUQ6IHN0cmluZyA9IGNyZWF0ZUNoYWluVHguZ2V0Vk1JRCgpLnRvU3RyaW5nKFwiaGV4XCIpXG4gICAgZXhwZWN0KHZtSUQpLnRvQmUodm1JREhleClcbiAgfSlcblxuICB0ZXN0KFwiZ2V0RlhJRHNcIiwgKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGZ4SURzSGV4OiBzdHJpbmdbXSA9IFtcbiAgICAgIFwiNmU2Njc0NjY3ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMFwiLFxuICAgICAgXCI3MDcyNmY3MDY1NzI3NDc5NjY3ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gICAgICBcIjczNjU2MzcwMzIzNTM2NmIzMTY2NzgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIlxuICAgIF1cbiAgICBjb25zdCBmeElEczogQnVmZmVyW10gPSBjcmVhdGVDaGFpblR4LmdldEZYSURzKClcbiAgICBleHBlY3QoZnhJRHMubGVuZ3RoKS50b0JlKDMpXG4gICAgZnhJRHMuZm9yRWFjaCgoZnhJRDogQnVmZmVyLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICBleHBlY3QoZnhJRC50b1N0cmluZyhcImhleFwiKSkudG9CZShmeElEc0hleFtpbmRleF0pXG4gICAgfSlcbiAgfSlcblxuICB0ZXN0KFwiZ2V0R2VuZXNpc0RhdGFcIiwgKCk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IGdkOiBzdHJpbmcgPSBjcmVhdGVDaGFpblR4LmdldEdlbmVzaXNEYXRhKClcbiAgICBjb25zdCBnZW5lc2lzRGF0YTogR2VuZXNpc0RhdGEgPSBuZXcgR2VuZXNpc0RhdGEoKVxuICAgIGNvbnN0IGJ1ZjogQnVmZmVyID0gYmludG9vbHMuY2I1OERlY29kZShnZClcbiAgICBnZW5lc2lzRGF0YS5mcm9tQnVmZmVyKGJ1ZilcbiAgICBjb25zdCBnZW5lc2lzQXNzZXRzOiBHZW5lc2lzQXNzZXRbXSA9IGdlbmVzaXNEYXRhLmdldEdlbmVzaXNBc3NldHMoKVxuICAgIGNvbnN0IGdlbmVzaXNBc3NldDogR2VuZXNpc0Fzc2V0ID0gZ2VuZXNpc0Fzc2V0c1swXVxuXG4gICAgY29uc3Qgbjogc3RyaW5nID0gXCJUZXN0IEFzc2V0XCJcbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSBnZW5lc2lzQXNzZXQuZ2V0TmFtZSgpXG4gICAgZXhwZWN0KG5hbWUpLnRvQmUobilcblxuICAgIGNvbnN0IHM6IHN0cmluZyA9IFwiVEVTVFwiXG4gICAgY29uc3Qgc3ltYm9sOiBzdHJpbmcgPSBnZW5lc2lzQXNzZXQuZ2V0U3ltYm9sKClcbiAgICBleHBlY3Qoc3ltYm9sKS50b0JlKHMpXG5cbiAgICBjb25zdCBkOiBudW1iZXIgPSAwXG4gICAgY29uc3QgZGVub21pbmF0aW9uID0gZ2VuZXNpc0Fzc2V0LmdldERlbm9taW5hdGlvbigpXG4gICAgZXhwZWN0KGRlbm9taW5hdGlvbikudG9CZShkKVxuICB9KVxuXG4gIGRlc2NyaWJlKFwiQWxseWNoYWluQXV0aFwiLCAoKTogdm9pZCA9PiB7XG4gICAgY29uc3Qgc2E6IEFsbHljaGFpbkF1dGggPSBjcmVhdGVDaGFpblR4LmdldEFsbHljaGFpbkF1dGgoKVxuXG4gICAgdGVzdChcImdldFR5cGVOYW1lXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IGFsbHljaGFpbkF1dGhUeXBlTmFtZTogc3RyaW5nID0gc2EuZ2V0VHlwZU5hbWUoKVxuICAgICAgZXhwZWN0KGFsbHljaGFpbkF1dGhUeXBlTmFtZSkudG9CZShcIkFsbHljaGFpbkF1dGhcIilcbiAgICB9KVxuXG4gICAgdGVzdChcImdldFR5cGVJRFwiLCBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICBjb25zdCBhbGx5Y2hhaW5BdXRoVHlwZUlEOiBudW1iZXIgPSBzYS5nZXRUeXBlSUQoKVxuICAgICAgZXhwZWN0KGFsbHljaGFpbkF1dGhUeXBlSUQpLnRvQmUoUGxhdGZvcm1WTUNvbnN0YW50cy5BTExZQ0hBSU5BVVRIKVxuICAgIH0pXG5cbiAgICB0ZXN0KFwiZ2V0TnVtQWRkcmVzc0luZGljZXNcIiwgYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3QgbnVtQWRkcmVzc0luZGljZXM6IG51bWJlciA9IHNhLmdldE51bUFkZHJlc3NJbmRpY2VzKClcbiAgICAgIGNvbnN0IG5BSTogbnVtYmVyID0gMlxuICAgICAgZXhwZWN0KG51bUFkZHJlc3NJbmRpY2VzKS50b0JlKG5BSSlcbiAgICB9KVxuXG4gICAgdGVzdChcImFkZHJlc3NJbmRpY2VzXCIsIGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGNvbnN0IGFpOiBudW1iZXJbXSA9IFswLCAxXVxuICAgICAgY29uc3QgYWRkcmVzc0luZGljZXM6IEJ1ZmZlcltdID0gc2EuZ2V0QWRkcmVzc0luZGljZXMoKVxuICAgICAgYWRkcmVzc0luZGljZXMuZm9yRWFjaCgoYWRkcmVzc0luZGV4OiBCdWZmZXIsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgZXhwZWN0KGFkZHJlc3NJbmRleC5yZWFkSW50MzJCRSgwKSkudG9CZShhaVtpbmRleF0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG59KVxuIl19