"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const outputs_1 = require("../../../src/apis/avm/outputs");
const initialstates_1 = require("../../../src/apis/avm/initialstates");
const avm_1 = require("../../../src/apis/avm");
const utils_1 = require("../../../src/utils");
/**
 * @ignore
 */
const serialization = utils_1.Serialization.getInstance();
describe("AVM", () => {
    test("GenesisData", () => {
        const networkID = 1337;
        const m = "2Zc54v4ek37TEwu4LiV3j41PUMRd6acDDU3ZCVSxE7X";
        const cb58 = "cb58";
        const memo = serialization.typeToBuffer(m, cb58);
        const amount = new bn_js_1.default(100000);
        const address = "Swap-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
        const bech32 = "bech32";
        const addressBuf = serialization.typeToBuffer(address, bech32);
        const threshold = 1;
        const locktime = new bn_js_1.default(0);
        const assetAlias = "asset1";
        const name = "asset1";
        const symbol = "MFCA";
        const denomination = 1;
        const vcapSecpOutput = new outputs_1.SECPTransferOutput(amount, [addressBuf], locktime, threshold);
        const initialStates = new initialstates_1.InitialStates();
        initialStates.addOutput(vcapSecpOutput);
        const genesisAsset = new avm_1.GenesisAsset(assetAlias, name, symbol, denomination, initialStates, memo);
        const genesisAssets = [genesisAsset];
        const genesisData = new avm_1.GenesisData(genesisAssets, networkID);
        const genesisData2 = new avm_1.GenesisData();
        genesisData2.fromBuffer(genesisData.toBuffer());
        expect(genesisData.toBuffer().toString("hex")).toBe(genesisData2.toBuffer().toString("hex"));
        expect(genesisData.getTypeName()).toBe("GenesisData");
        expect(genesisData.getTypeID()).toBeUndefined();
        expect(genesisData.getCodecID()).toBe(avm_1.AVMConstants.LATESTCODEC);
        expect(genesisData.getNetworkID()).toBe(networkID);
        expect(genesisData.getGenesisAssets()).toStrictEqual(genesisAssets);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXNpc2RhdGEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3RzL2FwaXMvYXZtL2dlbmVzaXNkYXRhLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBc0I7QUFFdEIsMkRBQWtFO0FBQ2xFLHVFQUFtRTtBQUNuRSwrQ0FBK0U7QUFDL0UsOENBQWtFO0FBRWxFOztHQUVHO0FBQ0gsTUFBTSxhQUFhLEdBQWtCLHFCQUFhLENBQUMsV0FBVyxFQUFFLENBQUE7QUFDaEUsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFTLEVBQUU7SUFDekIsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFTLEVBQUU7UUFDN0IsTUFBTSxTQUFTLEdBQVcsSUFBSSxDQUFBO1FBQzlCLE1BQU0sQ0FBQyxHQUFXLDZDQUE2QyxDQUFBO1FBQy9ELE1BQU0sSUFBSSxHQUFtQixNQUFNLENBQUE7UUFDbkMsTUFBTSxJQUFJLEdBQVcsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDeEQsTUFBTSxNQUFNLEdBQU8sSUFBSSxlQUFFLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDakMsTUFBTSxPQUFPLEdBQVcsbURBQW1ELENBQUE7UUFDM0UsTUFBTSxNQUFNLEdBQW1CLFFBQVEsQ0FBQTtRQUN2QyxNQUFNLFVBQVUsR0FBVyxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN0RSxNQUFNLFNBQVMsR0FBVyxDQUFDLENBQUE7UUFDM0IsTUFBTSxRQUFRLEdBQU8sSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDOUIsTUFBTSxVQUFVLEdBQVcsUUFBUSxDQUFBO1FBQ25DLE1BQU0sSUFBSSxHQUFXLFFBQVEsQ0FBQTtRQUM3QixNQUFNLE1BQU0sR0FBVyxNQUFNLENBQUE7UUFDN0IsTUFBTSxZQUFZLEdBQVcsQ0FBQyxDQUFBO1FBQzlCLE1BQU0sY0FBYyxHQUFHLElBQUksNEJBQWtCLENBQzNDLE1BQU0sRUFDTixDQUFDLFVBQVUsQ0FBQyxFQUNaLFFBQVEsRUFDUixTQUFTLENBQ1YsQ0FBQTtRQUNELE1BQU0sYUFBYSxHQUFrQixJQUFJLDZCQUFhLEVBQUUsQ0FBQTtRQUN4RCxhQUFhLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3ZDLE1BQU0sWUFBWSxHQUFpQixJQUFJLGtCQUFZLENBQ2pELFVBQVUsRUFDVixJQUFJLEVBQ0osTUFBTSxFQUNOLFlBQVksRUFDWixhQUFhLEVBQ2IsSUFBSSxDQUNMLENBQUE7UUFDRCxNQUFNLGFBQWEsR0FBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNwRCxNQUFNLFdBQVcsR0FBZ0IsSUFBSSxpQkFBVyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUMxRSxNQUFNLFlBQVksR0FBZ0IsSUFBSSxpQkFBVyxFQUFFLENBQUE7UUFDbkQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUMvQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDakQsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FDeEMsQ0FBQTtRQUNELE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDckQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQy9DLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMvRCxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2xELE1BQU0sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUNyRSxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXHJcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcclxuaW1wb3J0IHsgU0VDUFRyYW5zZmVyT3V0cHV0IH0gZnJvbSBcIi4uLy4uLy4uL3NyYy9hcGlzL2F2bS9vdXRwdXRzXCJcclxuaW1wb3J0IHsgSW5pdGlhbFN0YXRlcyB9IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9hdm0vaW5pdGlhbHN0YXRlc1wiXHJcbmltcG9ydCB7IEdlbmVzaXNEYXRhLCBHZW5lc2lzQXNzZXQsIEFWTUNvbnN0YW50cyB9IGZyb20gXCIuLi8uLi8uLi9zcmMvYXBpcy9hdm1cIlxyXG5pbXBvcnQgeyBTZXJpYWxpemF0aW9uLCBTZXJpYWxpemVkVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9zcmMvdXRpbHNcIlxyXG5cclxuLyoqXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbmNvbnN0IHNlcmlhbGl6YXRpb246IFNlcmlhbGl6YXRpb24gPSBTZXJpYWxpemF0aW9uLmdldEluc3RhbmNlKClcclxuZGVzY3JpYmUoXCJBVk1cIiwgKCk6IHZvaWQgPT4ge1xyXG4gIHRlc3QoXCJHZW5lc2lzRGF0YVwiLCAoKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBuZXR3b3JrSUQ6IG51bWJlciA9IDEzMzdcclxuICAgIGNvbnN0IG06IHN0cmluZyA9IFwiMlpjNTR2NGVrMzdURXd1NExpVjNqNDFQVU1SZDZhY0REVTNaQ1ZTeEU3WFwiXHJcbiAgICBjb25zdCBjYjU4OiBTZXJpYWxpemVkVHlwZSA9IFwiY2I1OFwiXHJcbiAgICBjb25zdCBtZW1vOiBCdWZmZXIgPSBzZXJpYWxpemF0aW9uLnR5cGVUb0J1ZmZlcihtLCBjYjU4KVxyXG4gICAgY29uc3QgYW1vdW50OiBCTiA9IG5ldyBCTigxMDAwMDApXHJcbiAgICBjb25zdCBhZGRyZXNzOiBzdHJpbmcgPSBcIlN3YXAtbG9jYWwxOGptYThwcHczbmh4NXI0YXA4Y2xhenowZHBzN3J2NXUwMHo5NnVcIlxyXG4gICAgY29uc3QgYmVjaDMyOiBTZXJpYWxpemVkVHlwZSA9IFwiYmVjaDMyXCJcclxuICAgIGNvbnN0IGFkZHJlc3NCdWY6IEJ1ZmZlciA9IHNlcmlhbGl6YXRpb24udHlwZVRvQnVmZmVyKGFkZHJlc3MsIGJlY2gzMilcclxuICAgIGNvbnN0IHRocmVzaG9sZDogbnVtYmVyID0gMVxyXG4gICAgY29uc3QgbG9ja3RpbWU6IEJOID0gbmV3IEJOKDApXHJcbiAgICBjb25zdCBhc3NldEFsaWFzOiBzdHJpbmcgPSBcImFzc2V0MVwiXHJcbiAgICBjb25zdCBuYW1lOiBzdHJpbmcgPSBcImFzc2V0MVwiXHJcbiAgICBjb25zdCBzeW1ib2w6IHN0cmluZyA9IFwiTUZDQVwiXHJcbiAgICBjb25zdCBkZW5vbWluYXRpb246IG51bWJlciA9IDFcclxuICAgIGNvbnN0IHZjYXBTZWNwT3V0cHV0ID0gbmV3IFNFQ1BUcmFuc2Zlck91dHB1dChcclxuICAgICAgYW1vdW50LFxyXG4gICAgICBbYWRkcmVzc0J1Zl0sXHJcbiAgICAgIGxvY2t0aW1lLFxyXG4gICAgICB0aHJlc2hvbGRcclxuICAgIClcclxuICAgIGNvbnN0IGluaXRpYWxTdGF0ZXM6IEluaXRpYWxTdGF0ZXMgPSBuZXcgSW5pdGlhbFN0YXRlcygpXHJcbiAgICBpbml0aWFsU3RhdGVzLmFkZE91dHB1dCh2Y2FwU2VjcE91dHB1dClcclxuICAgIGNvbnN0IGdlbmVzaXNBc3NldDogR2VuZXNpc0Fzc2V0ID0gbmV3IEdlbmVzaXNBc3NldChcclxuICAgICAgYXNzZXRBbGlhcyxcclxuICAgICAgbmFtZSxcclxuICAgICAgc3ltYm9sLFxyXG4gICAgICBkZW5vbWluYXRpb24sXHJcbiAgICAgIGluaXRpYWxTdGF0ZXMsXHJcbiAgICAgIG1lbW9cclxuICAgIClcclxuICAgIGNvbnN0IGdlbmVzaXNBc3NldHM6IEdlbmVzaXNBc3NldFtdID0gW2dlbmVzaXNBc3NldF1cclxuICAgIGNvbnN0IGdlbmVzaXNEYXRhOiBHZW5lc2lzRGF0YSA9IG5ldyBHZW5lc2lzRGF0YShnZW5lc2lzQXNzZXRzLCBuZXR3b3JrSUQpXHJcbiAgICBjb25zdCBnZW5lc2lzRGF0YTI6IEdlbmVzaXNEYXRhID0gbmV3IEdlbmVzaXNEYXRhKClcclxuICAgIGdlbmVzaXNEYXRhMi5mcm9tQnVmZmVyKGdlbmVzaXNEYXRhLnRvQnVmZmVyKCkpXHJcbiAgICBleHBlY3QoZ2VuZXNpc0RhdGEudG9CdWZmZXIoKS50b1N0cmluZyhcImhleFwiKSkudG9CZShcclxuICAgICAgZ2VuZXNpc0RhdGEyLnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIilcclxuICAgIClcclxuICAgIGV4cGVjdChnZW5lc2lzRGF0YS5nZXRUeXBlTmFtZSgpKS50b0JlKFwiR2VuZXNpc0RhdGFcIilcclxuICAgIGV4cGVjdChnZW5lc2lzRGF0YS5nZXRUeXBlSUQoKSkudG9CZVVuZGVmaW5lZCgpXHJcbiAgICBleHBlY3QoZ2VuZXNpc0RhdGEuZ2V0Q29kZWNJRCgpKS50b0JlKEFWTUNvbnN0YW50cy5MQVRFU1RDT0RFQylcclxuICAgIGV4cGVjdChnZW5lc2lzRGF0YS5nZXROZXR3b3JrSUQoKSkudG9CZShuZXR3b3JrSUQpXHJcbiAgICBleHBlY3QoZ2VuZXNpc0RhdGEuZ2V0R2VuZXNpc0Fzc2V0cygpKS50b1N0cmljdEVxdWFsKGdlbmVzaXNBc3NldHMpXHJcbiAgfSlcclxufSlcclxuIl19