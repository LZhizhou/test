"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("../src");
const api_1 = require("../src/apis/avm/api");
const api_2 = require("../src/apis/admin/api");
const api_3 = require("../src/apis/health/api");
const api_4 = require("../src/apis/info/api");
const api_5 = require("../src/apis/keystore/api");
const api_6 = require("../src/apis/metrics/api");
const api_7 = require("../src/apis/platformvm/api");
const testlib_1 = require("./testlib");
describe("Axia", () => {
    const blockchainID = "6h2s5de1VC65meajE1L2PjvZ1MXvHc3F6eqPCGKuDt4MxiweF";
    let host = "127.0.0.1";
    const port = 80;
    const networkID = 1337;
    let protocol = "https";
    let axia;
    let axiaCore;
    const api = "api.axc.network";
    const url = "https://api.axc.network:80";
    const encrypted = "https";
    const skipinit = true;
    beforeAll(() => {
        axia = new src_1.Axia(host, port, protocol, networkID, undefined, undefined, undefined, skipinit);
        axia.addAPI("admin", api_2.AdminAPI);
        axia.addAPI("swapchain", api_1.AVMAPI, "/ext/allychain/avm", blockchainID);
        axia.addAPI("health", api_3.HealthAPI);
        axia.addAPI("info", api_4.InfoAPI);
        axia.addAPI("keystore", api_5.KeystoreAPI);
        axia.addAPI("metrics", api_6.MetricsAPI);
        axia.addAPI("corechain", api_7.PlatformVMAPI);
    });
    test("Remove special characters", () => {
        host = "a&&&&p#i,.@a+v(a)x$.~n%e't:w*o?r<k>";
        protocol = "h@t&@&@t#p+s()$";
        axia = new src_1.Axia(host, port, protocol, networkID);
        expect(axia.getHost()).toBe(api);
        expect(axia.getProtocol()).toBe(encrypted);
        expect(axia.getURL()).toBe(url);
        axiaCore = new src_1.AxiaCore(host, port, protocol);
        expect(axiaCore.getHost()).toBe(api);
        expect(axiaCore.getProtocol()).toBe(encrypted);
        expect(axiaCore.getURL()).toBe(url);
    });
    test("Can specify base endpoint", () => {
        axia = new src_1.Axia();
        axia.setAddress(api, port, encrypted, "rpc");
        axia.setNetworkID(networkID);
        expect(axia.getHost()).toBe(api);
        expect(axia.getProtocol()).toBe(encrypted);
        expect(axia.getPort()).toBe(port);
        expect(axia.getBaseEndpoint()).toBe("rpc");
        expect(axia.getURL()).toBe(`${url}/rpc`);
        expect(axia.getNetworkID()).toBe(networkID);
    });
    test("Can initialize without port", () => {
        protocol = encrypted;
        host = api;
        axia = new src_1.Axia(host, undefined, protocol, networkID);
        expect(axia.getPort()).toBe(undefined);
        expect(axia.getURL()).toBe(`${protocol}://${api}`);
        axiaCore = new src_1.AxiaCore(host, undefined, protocol);
        expect(axiaCore.getPort()).toBe(undefined);
        expect(axiaCore.getURL()).toBe(`${protocol}://${api}`);
    });
    test("Can initialize with port", () => {
        protocol = encrypted;
        axia = new src_1.Axia(host, port, protocol, networkID);
        expect(axia.getIP()).toBe(host);
        expect(axia.getHost()).toBe(host);
        expect(axia.getPort()).toBe(port);
        expect(axia.getProtocol()).toBe(protocol);
        expect(axia.getURL()).toBe(`${protocol}://${host}:${port}`);
        expect(axia.getNetworkID()).toBe(1337);
        expect(axia.getHeaders()).toStrictEqual({});
        axia.setNetworkID(50);
        expect(axia.getNetworkID()).toBe(50);
        axia.setNetworkID(12345);
        expect(axia.getNetworkID()).toBe(12345);
    });
    test("Endpoints correct", () => {
        expect(axia.Admin()).not.toBeInstanceOf(api_1.AVMAPI);
        expect(axia.Admin()).toBeInstanceOf(api_2.AdminAPI);
        expect(axia.SwapChain()).not.toBeInstanceOf(api_2.AdminAPI);
        expect(axia.SwapChain()).toBeInstanceOf(api_1.AVMAPI);
        expect(axia.Health()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(axia.Health()).toBeInstanceOf(api_3.HealthAPI);
        expect(axia.Info()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(axia.Info()).toBeInstanceOf(api_4.InfoAPI);
        expect(axia.CoreChain()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(axia.CoreChain()).toBeInstanceOf(api_7.PlatformVMAPI);
        expect(axia.NodeKeys()).not.toBeInstanceOf(api_7.PlatformVMAPI);
        expect(axia.NodeKeys()).toBeInstanceOf(api_5.KeystoreAPI);
        expect(axia.Metrics()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(axia.Metrics()).toBeInstanceOf(api_6.MetricsAPI);
        expect(axia.Admin().getRPCID()).toBe(1);
        expect(axia.SwapChain().getRPCID()).toBe(1);
        expect(axia.CoreChain().getRPCID()).toBe(1);
        expect(axia.NodeKeys().getRPCID()).toBe(1);
    });
    test("Create new API", () => {
        axia.addAPI("avm2", api_1.AVMAPI);
        expect(axia.api("avm2")).toBeInstanceOf(api_1.AVMAPI);
        axia.addAPI("keystore2", api_5.KeystoreAPI, "/ext/keystore2");
        expect(axia.api("keystore2")).toBeInstanceOf(api_5.KeystoreAPI);
        axia.api("keystore2").setBaseURL("/ext/keystore3");
        expect(axia.api("keystore2").getBaseURL()).toBe("/ext/keystore3");
        expect(axia.api("keystore2").getDB()).toHaveProperty("namespace");
    });
    test("Customize headers", () => {
        axia.setHeader("Swap-Custom-Header", "example");
        axia.setHeader("Swap-Foo", "Foo");
        axia.setHeader("Swap-Bar", "Bar");
        expect(axia.getHeaders()).toStrictEqual({
            "Swap-Custom-Header": "example",
            "Swap-Foo": "Foo",
            "Swap-Bar": "Bar"
        });
        axia.removeHeader("Swap-Foo");
        expect(axia.getHeaders()).toStrictEqual({
            "Swap-Custom-Header": "example",
            "Swap-Bar": "Bar"
        });
        axia.removeAllHeaders();
        expect(axia.getHeaders()).toStrictEqual({});
    });
    test("Customize request config", () => {
        expect(axia.getRequestConfig()).toStrictEqual({});
        axia.setRequestConfig("withCredentials", true);
        axia.setRequestConfig("withFoo", "Foo");
        axia.setRequestConfig("withBar", "Bar");
        expect(axia.getRequestConfig()).toStrictEqual({
            withCredentials: true,
            withFoo: "Foo",
            withBar: "Bar"
        });
        axia.removeRequestConfig("withFoo");
        expect(axia.getRequestConfig()).toStrictEqual({
            withCredentials: true,
            withBar: "Bar"
        });
        axia.removeAllRequestConfigs();
        expect(axia.getRequestConfig()).toStrictEqual({});
    });
});
describe("HTTP Operations", () => {
    const host = "127.0.0.1";
    const port = 8080;
    const protocol = "http";
    const path = "/ext/testingrequests";
    let axia;
    beforeAll(() => {
        axia = new src_1.Axia(host, port, protocol, 12345, undefined, undefined, undefined, true);
        axia.addAPI("testingrequests", testlib_1.TestAPI, path);
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test("GET works", () => __awaiter(void 0, void 0, void 0, function* () {
        const input = "TestGET";
        const api = axia.api("testingrequests");
        const result = api.TestGET(input, `/${input}`);
        const payload = {
            result: {
                output: input
            }
        };
        const responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test("DELETE works", () => __awaiter(void 0, void 0, void 0, function* () {
        const input = "TestDELETE";
        const api = axia.api("testingrequests");
        const axiosConfig = {
            baseURL: `${protocol}://${host}:${port}`,
            responseType: "text"
        };
        const result = api.TestDELETE(input, `/${input}`, axiosConfig);
        const payload = {
            result: {
                output: input
            }
        };
        const responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test("POST works", () => __awaiter(void 0, void 0, void 0, function* () {
        const input = "TestPOST";
        const api = axia.api("testingrequests");
        const result = api.TestPOST(input, `/${input}`);
        const payload = {
            result: {
                output: input
            }
        };
        const responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test("PUT works", () => __awaiter(void 0, void 0, void 0, function* () {
        const input = "TestPUT";
        const api = axia.api("testingrequests");
        const result = api.TestPUT(input, `/${input}`);
        const payload = {
            result: {
                output: input
            }
        };
        const responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test("PATCH works", () => __awaiter(void 0, void 0, void 0, function* () {
        const input = "TestPATCH";
        const api = axia.api("testingrequests");
        const result = api.TestPATCH(input, `/${input}`);
        const payload = {
            result: {
                output: input
            }
        };
        const responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
});
//# sourceMappingURL=data:application/json;base64,