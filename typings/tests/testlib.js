"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAPI = void 0;
const apibase_1 = require("../src/common/apibase");
class TestAPI extends apibase_1.APIBase {
    constructor(axc, endpoint = "/ext/testing") {
        super(axc, endpoint);
        this.TestGET = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("get", path, { input }, axiosConfig); });
        this.TestDELETE = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("delete", path, { input }, axiosConfig); });
        this.TestPOST = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("post", path, {}, { input }, axiosConfig); });
        this.TestPUT = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("put", path, {}, { input }, axiosConfig); });
        this.TestPATCH = (input, path = "", axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod("patch", path, {}, { input }, axiosConfig); });
        this._respFn = (res) => {
            let response;
            if (typeof res.data === "string") {
                response = JSON.parse(res.data);
            }
            else {
                response = res.data;
            }
            return response.result;
        };
        this._TestMethod = (method, path = "", getdata = {}, postdata = undefined, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {
            if (postdata === undefined) {
                const res = yield this.core[method](this.baseURL + path, getdata, {}, axiosConfig);
                return this._respFn(res);
            }
            const res = yield this.core[method](this.baseURL + path, getdata, postdata, {}, axiosConfig);
            res.data = JSON.stringify(res.data); // coverage completeness
            return this._respFn(res);
        });
    }
}
exports.TestAPI = TestAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGxpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3RzL3Rlc3RsaWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRUEsbURBQW9FO0FBRXBFLE1BQWEsT0FBUSxTQUFRLGlCQUFPO0lBbUVsQyxZQUFZLEdBQWEsRUFBRSxXQUFtQixjQUFjO1FBQzFELEtBQUssQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFuRXRCLFlBQU8sR0FBRyxDQUNSLEtBQWEsRUFDYixPQUFlLEVBQUUsRUFDakIsY0FBa0MsU0FBUyxFQUMxQixFQUFFLGdEQUFDLE9BQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFBO1FBQzNFLGVBQVUsR0FBRyxDQUNYLEtBQWEsRUFDYixPQUFlLEVBQUUsRUFDakIsY0FBa0MsU0FBUyxFQUMxQixFQUFFLGdEQUFDLE9BQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFBO1FBQzlFLGFBQVEsR0FBRyxDQUNULEtBQWEsRUFDYixPQUFlLEVBQUUsRUFDakIsY0FBa0MsU0FBUyxFQUMxQixFQUFFLGdEQUNuQixPQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQSxHQUFBLENBQUE7UUFDNUQsWUFBTyxHQUFHLENBQ1IsS0FBYSxFQUNiLE9BQWUsRUFBRSxFQUNqQixjQUFrQyxTQUFTLEVBQzFCLEVBQUUsZ0RBQ25CLE9BQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFBLEdBQUEsQ0FBQTtRQUMzRCxjQUFTLEdBQUcsQ0FDVixLQUFhLEVBQ2IsT0FBZSxFQUFFLEVBQ2pCLGNBQWtDLFNBQVMsRUFDMUIsRUFBRSxnREFDbkIsT0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFBO1FBRW5ELFlBQU8sR0FBRyxDQUFDLEdBQXdCLEVBQU8sRUFBRTtZQUNwRCxJQUFJLFFBQWEsQ0FBQTtZQUNqQixJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ2hDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUNoQztpQkFBTTtnQkFDTCxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQWMsQ0FBQTthQUM5QjtZQUNELE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQTtRQUN4QixDQUFDLENBQUE7UUFFUyxnQkFBVyxHQUFHLENBQ3RCLE1BQWMsRUFDZCxPQUFlLEVBQUUsRUFDakIsVUFBa0IsRUFBRSxFQUNwQixXQUFtQixTQUFTLEVBQzVCLGNBQWtDLFNBQVMsRUFDMUIsRUFBRTtZQUNuQixJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQzFCLE1BQU0sR0FBRyxHQUF3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUNuQixPQUFPLEVBQ1AsRUFBRSxFQUNGLFdBQVcsQ0FDWixDQUFBO2dCQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQTthQUN6QjtZQUNELE1BQU0sR0FBRyxHQUF3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUNuQixPQUFPLEVBQ1AsUUFBUSxFQUNSLEVBQUUsRUFDRixXQUFXLENBQ1osQ0FBQTtZQUNELEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyx3QkFBd0I7WUFDNUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzFCLENBQUMsQ0FBQSxDQUFBO0lBSUQsQ0FBQztDQUNGO0FBdEVELDBCQXNFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBeGlhQ29yZSBmcm9tIFwiLi4vc3JjL2F4aWFcIlxuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSBcImF4aW9zXCJcbmltcG9ydCB7IEFQSUJhc2UsIFJlcXVlc3RSZXNwb25zZURhdGEgfSBmcm9tIFwiLi4vc3JjL2NvbW1vbi9hcGliYXNlXCJcblxuZXhwb3J0IGNsYXNzIFRlc3RBUEkgZXh0ZW5kcyBBUElCYXNlIHtcbiAgVGVzdEdFVCA9IGFzeW5jIChcbiAgICBpbnB1dDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyA9IFwiXCIsXG4gICAgYXhpb3NDb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZFxuICApOiBQcm9taXNlPG9iamVjdD4gPT4gdGhpcy5fVGVzdE1ldGhvZChcImdldFwiLCBwYXRoLCB7IGlucHV0IH0sIGF4aW9zQ29uZmlnKVxuICBUZXN0REVMRVRFID0gYXN5bmMgKFxuICAgIGlucHV0OiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nID0gXCJcIixcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PiB0aGlzLl9UZXN0TWV0aG9kKFwiZGVsZXRlXCIsIHBhdGgsIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpXG4gIFRlc3RQT1NUID0gYXN5bmMgKFxuICAgIGlucHV0OiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nID0gXCJcIixcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PlxuICAgIHRoaXMuX1Rlc3RNZXRob2QoXCJwb3N0XCIsIHBhdGgsIHt9LCB7IGlucHV0IH0sIGF4aW9zQ29uZmlnKVxuICBUZXN0UFVUID0gYXN5bmMgKFxuICAgIGlucHV0OiBzdHJpbmcsXG4gICAgcGF0aDogc3RyaW5nID0gXCJcIixcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PlxuICAgIHRoaXMuX1Rlc3RNZXRob2QoXCJwdXRcIiwgcGF0aCwge30sIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpXG4gIFRlc3RQQVRDSCA9IGFzeW5jIChcbiAgICBpbnB1dDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyA9IFwiXCIsXG4gICAgYXhpb3NDb25maWc6IEF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZFxuICApOiBQcm9taXNlPG9iamVjdD4gPT5cbiAgICB0aGlzLl9UZXN0TWV0aG9kKFwicGF0Y2hcIiwgcGF0aCwge30sIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpXG5cbiAgcHJvdGVjdGVkIF9yZXNwRm4gPSAocmVzOiBSZXF1ZXN0UmVzcG9uc2VEYXRhKTogYW55ID0+IHtcbiAgICBsZXQgcmVzcG9uc2U6IGFueVxuICAgIGlmICh0eXBlb2YgcmVzLmRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZShyZXMuZGF0YSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2UgPSByZXMuZGF0YSBhcyBvYmplY3RcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlc3VsdFxuICB9XG5cbiAgcHJvdGVjdGVkIF9UZXN0TWV0aG9kID0gYXN5bmMgKFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyA9IFwiXCIsXG4gICAgZ2V0ZGF0YTogb2JqZWN0ID0ge30sXG4gICAgcG9zdGRhdGE6IG9iamVjdCA9IHVuZGVmaW5lZCxcbiAgICBheGlvc0NvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkXG4gICk6IFByb21pc2U8b2JqZWN0PiA9PiB7XG4gICAgaWYgKHBvc3RkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHJlczogUmVxdWVzdFJlc3BvbnNlRGF0YSA9IGF3YWl0IHRoaXMuY29yZVttZXRob2RdKFxuICAgICAgICB0aGlzLmJhc2VVUkwgKyBwYXRoLFxuICAgICAgICBnZXRkYXRhLFxuICAgICAgICB7fSxcbiAgICAgICAgYXhpb3NDb25maWdcbiAgICAgIClcbiAgICAgIHJldHVybiB0aGlzLl9yZXNwRm4ocmVzKVxuICAgIH1cbiAgICBjb25zdCByZXM6IFJlcXVlc3RSZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLmNvcmVbbWV0aG9kXShcbiAgICAgIHRoaXMuYmFzZVVSTCArIHBhdGgsXG4gICAgICBnZXRkYXRhLFxuICAgICAgcG9zdGRhdGEsXG4gICAgICB7fSxcbiAgICAgIGF4aW9zQ29uZmlnXG4gICAgKVxuICAgIHJlcy5kYXRhID0gSlNPTi5zdHJpbmdpZnkocmVzLmRhdGEpIC8vIGNvdmVyYWdlIGNvbXBsZXRlbmVzc1xuICAgIHJldHVybiB0aGlzLl9yZXNwRm4ocmVzKVxuICB9XG5cbiAgY29uc3RydWN0b3IoYXhjOiBBeGlhQ29yZSwgZW5kcG9pbnQ6IHN0cmluZyA9IFwiL2V4dC90ZXN0aW5nXCIpIHtcbiAgICBzdXBlcihheGMsIGVuZHBvaW50KVxuICB9XG59XG4iXX0=