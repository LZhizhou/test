"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const evm_1 = require("src/apis/evm");
const utils_1 = require("src/utils");
const buffer_1 = require("buffer/");
describe("HelperFunctions", () => {
    test("calcBytesCost", () => {
        const importTx = new evm_1.ImportTx();
        // an empty EVM ImportTx is 76 bytes
        let cost = 76;
        let bytesCost = (0, utils_1.calcBytesCost)(importTx.toBuffer().byteLength);
        expect(cost).toEqual(bytesCost);
        // the byteCost should always be 1 unit of gas per byte
        let size = 100;
        cost = 100;
        bytesCost = (0, utils_1.calcBytesCost)(size);
        expect(cost).toEqual(bytesCost);
        size = 507;
        cost = 507;
        bytesCost = (0, utils_1.calcBytesCost)(size);
        expect(cost).toEqual(bytesCost);
        let hex = "000030399d0775f450604bd2fbc49ce0c5c1c6dfeb2dc2acb8c92c26eeae6e6df4502b19d891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf000000018db97c7cece249c2b98bdc0226cc4c2a57bf52fc00b1a2bc2ec50000dbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db000000000000000000000001dbcf890f77f49b96857648b72b77f9f82937f28a68704af05da0dc12ba53f2db0000000700b1a2bc2eb5bdc0000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c";
        const exportTx = new evm_1.ExportTx();
        let unsignedTx = new evm_1.UnsignedTx(exportTx);
        exportTx.fromBuffer(new buffer_1.Buffer(hex, "hex"));
        cost = (0, utils_1.costExportTx)(unsignedTx);
        bytesCost = 11230;
        expect(cost).toEqual(bytesCost);
        hex =
            "000030399d0775f450604bd2fbc49ce0c5c1c6dfeb2dc2acb8c92c26eeae6e6df4502b19d891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf0000000000000000";
        importTx.fromBuffer(new buffer_1.Buffer(hex, "hex"));
        unsignedTx = new evm_1.UnsignedTx(importTx);
        cost = (0, utils_1.costImportTx)(unsignedTx);
        bytesCost = 10082;
        expect(cost).toEqual(bytesCost);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVyZnVuY3Rpb25zLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0cy91dGlscy9oZWxwZXJmdW5jdGlvbnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUE2RDtBQUM3RCxxQ0FBcUU7QUFDckUsb0NBQWdDO0FBRWhDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFTLEVBQUU7SUFDckMsSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFTLEVBQUU7UUFDL0IsTUFBTSxRQUFRLEdBQWEsSUFBSSxjQUFRLEVBQUUsQ0FBQTtRQUN6QyxvQ0FBb0M7UUFDcEMsSUFBSSxJQUFJLEdBQVcsRUFBRSxDQUFBO1FBQ3JCLElBQUksU0FBUyxHQUFXLElBQUEscUJBQWEsRUFBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDckUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUUvQix1REFBdUQ7UUFDdkQsSUFBSSxJQUFJLEdBQVcsR0FBRyxDQUFBO1FBQ3RCLElBQUksR0FBRyxHQUFHLENBQUE7UUFDVixTQUFTLEdBQUcsSUFBQSxxQkFBYSxFQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFL0IsSUFBSSxHQUFHLEdBQUcsQ0FBQTtRQUNWLElBQUksR0FBRyxHQUFHLENBQUE7UUFDVixTQUFTLEdBQUcsSUFBQSxxQkFBYSxFQUFDLElBQUksQ0FBQyxDQUFBO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFL0IsSUFBSSxHQUFHLEdBQ0wsa2NBQWtjLENBQUE7UUFDcGMsTUFBTSxRQUFRLEdBQWEsSUFBSSxjQUFRLEVBQUUsQ0FBQTtRQUN6QyxJQUFJLFVBQVUsR0FBZSxJQUFJLGdCQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDckQsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUMzQyxJQUFJLEdBQUcsSUFBQSxvQkFBWSxFQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQy9CLFNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUUvQixHQUFHO1lBQ0QsMEpBQTBKLENBQUE7UUFDNUosUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUMzQyxVQUFVLEdBQUcsSUFBSSxnQkFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3JDLElBQUksR0FBRyxJQUFBLG9CQUFZLEVBQUMsVUFBVSxDQUFDLENBQUE7UUFDL0IsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ2pDLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHBvcnRUeCwgSW1wb3J0VHgsIFVuc2lnbmVkVHggfSBmcm9tIFwic3JjL2FwaXMvZXZtXCJcclxuaW1wb3J0IHsgY2FsY0J5dGVzQ29zdCwgY29zdEV4cG9ydFR4LCBjb3N0SW1wb3J0VHggfSBmcm9tIFwic3JjL3V0aWxzXCJcclxuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSBcImJ1ZmZlci9cIlxyXG5cclxuZGVzY3JpYmUoXCJIZWxwZXJGdW5jdGlvbnNcIiwgKCk6IHZvaWQgPT4ge1xyXG4gIHRlc3QoXCJjYWxjQnl0ZXNDb3N0XCIsICgpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IGltcG9ydFR4OiBJbXBvcnRUeCA9IG5ldyBJbXBvcnRUeCgpXHJcbiAgICAvLyBhbiBlbXB0eSBFVk0gSW1wb3J0VHggaXMgNzYgYnl0ZXNcclxuICAgIGxldCBjb3N0OiBudW1iZXIgPSA3NlxyXG4gICAgbGV0IGJ5dGVzQ29zdDogbnVtYmVyID0gY2FsY0J5dGVzQ29zdChpbXBvcnRUeC50b0J1ZmZlcigpLmJ5dGVMZW5ndGgpXHJcbiAgICBleHBlY3QoY29zdCkudG9FcXVhbChieXRlc0Nvc3QpXHJcblxyXG4gICAgLy8gdGhlIGJ5dGVDb3N0IHNob3VsZCBhbHdheXMgYmUgMSB1bml0IG9mIGdhcyBwZXIgYnl0ZVxyXG4gICAgbGV0IHNpemU6IG51bWJlciA9IDEwMFxyXG4gICAgY29zdCA9IDEwMFxyXG4gICAgYnl0ZXNDb3N0ID0gY2FsY0J5dGVzQ29zdChzaXplKVxyXG4gICAgZXhwZWN0KGNvc3QpLnRvRXF1YWwoYnl0ZXNDb3N0KVxyXG5cclxuICAgIHNpemUgPSA1MDdcclxuICAgIGNvc3QgPSA1MDdcclxuICAgIGJ5dGVzQ29zdCA9IGNhbGNCeXRlc0Nvc3Qoc2l6ZSlcclxuICAgIGV4cGVjdChjb3N0KS50b0VxdWFsKGJ5dGVzQ29zdClcclxuXHJcbiAgICBsZXQgaGV4OiBzdHJpbmcgPVxyXG4gICAgICBcIjAwMDAzMDM5OWQwNzc1ZjQ1MDYwNGJkMmZiYzQ5Y2UwYzVjMWM2ZGZlYjJkYzJhY2I4YzkyYzI2ZWVhZTZlNmRmNDUwMmIxOWQ4OTFhZDU2MDU2ZDljMDFmMThmNDNmNThiNWM3ODRhZDA3YTRhNDljZjNkMWYxMTYyMzgwNGI1Y2JhMmM2YmYwMDAwMDAwMThkYjk3YzdjZWNlMjQ5YzJiOThiZGMwMjI2Y2M0YzJhNTdiZjUyZmMwMGIxYTJiYzJlYzUwMDAwZGJjZjg5MGY3N2Y0OWI5Njg1NzY0OGI3MmI3N2Y5ZjgyOTM3ZjI4YTY4NzA0YWYwNWRhMGRjMTJiYTUzZjJkYjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMWRiY2Y4OTBmNzdmNDliOTY4NTc2NDhiNzJiNzdmOWY4MjkzN2YyOGE2ODcwNGFmMDVkYTBkYzEyYmE1M2YyZGIwMDAwMDAwNzAwYjFhMmJjMmViNWJkYzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMTNjYjdkMzg0MmU4Y2VlNmEwZWJkMDlmMWZlODg0ZjY4NjFlMWIyOWNcIlxyXG4gICAgY29uc3QgZXhwb3J0VHg6IEV4cG9ydFR4ID0gbmV3IEV4cG9ydFR4KClcclxuICAgIGxldCB1bnNpZ25lZFR4OiBVbnNpZ25lZFR4ID0gbmV3IFVuc2lnbmVkVHgoZXhwb3J0VHgpXHJcbiAgICBleHBvcnRUeC5mcm9tQnVmZmVyKG5ldyBCdWZmZXIoaGV4LCBcImhleFwiKSlcclxuICAgIGNvc3QgPSBjb3N0RXhwb3J0VHgodW5zaWduZWRUeClcclxuICAgIGJ5dGVzQ29zdCA9IDExMjMwXHJcbiAgICBleHBlY3QoY29zdCkudG9FcXVhbChieXRlc0Nvc3QpXHJcblxyXG4gICAgaGV4ID1cclxuICAgICAgXCIwMDAwMzAzOTlkMDc3NWY0NTA2MDRiZDJmYmM0OWNlMGM1YzFjNmRmZWIyZGMyYWNiOGM5MmMyNmVlYWU2ZTZkZjQ1MDJiMTlkODkxYWQ1NjA1NmQ5YzAxZjE4ZjQzZjU4YjVjNzg0YWQwN2E0YTQ5Y2YzZDFmMTE2MjM4MDRiNWNiYTJjNmJmMDAwMDAwMDAwMDAwMDAwMFwiXHJcbiAgICBpbXBvcnRUeC5mcm9tQnVmZmVyKG5ldyBCdWZmZXIoaGV4LCBcImhleFwiKSlcclxuICAgIHVuc2lnbmVkVHggPSBuZXcgVW5zaWduZWRUeChpbXBvcnRUeClcclxuICAgIGNvc3QgPSBjb3N0SW1wb3J0VHgodW5zaWduZWRUeClcclxuICAgIGJ5dGVzQ29zdCA9IDEwMDgyXHJcbiAgICBleHBlY3QoY29zdCkudG9FcXVhbChieXRlc0Nvc3QpXHJcbiAgfSlcclxufSlcclxuIl19