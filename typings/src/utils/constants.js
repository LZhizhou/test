"use strict";
/**
 * @packageDocumentation
 * @module Utils-Constants
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Defaults = exports.AXCSTAKECAP = exports.AXCGWEI = exports.GWEI = exports.WEI = exports.NANOAXC = exports.MICROAXC = exports.MILLIAXC = exports.CENTIAXC = exports.DECIAXC = exports.ONEAXC = exports.mnemonic = exports.DefaultEVMLocalGenesisAddress = exports.DefaultEVMLocalGenesisPrivateKey = exports.DefaultLocalGenesisPrivateKey = exports.CoreChainVMName = exports.AXChainVMName = exports.SwapChainVMName = exports.CoreChainAlias = exports.AXChainAlias = exports.SwapChainAlias = exports.PrimaryNetworkID = exports.PlatformChainID = exports.DefaultNetworkID = exports.FallbackEVMChainID = exports.FallbackNetworkName = exports.FallbackHRP = exports.NetworkNameToNetworkID = exports.NetworkIDToNetworkNames = exports.HRPToNetworkID = exports.NetworkIDToHRP = exports.TestnetAPI = exports.MainnetAPI = exports.PrimaryAssetAlias = exports.NodeIDPrefix = exports.PrivateKeyPrefix = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
exports.PrivateKeyPrefix = "PrivateKey-";
exports.NodeIDPrefix = "NodeID-";
exports.PrimaryAssetAlias = "AXC";
exports.MainnetAPI = "1.p2p-v2.mainnet.axiacoin.network";
exports.TestnetAPI = "1.p2p-v2.testnet.axiacoin.network";
exports.NetworkIDToHRP = {
    0: "custom",
    1: "axc",
    5: "test",
    12345: "local"
};
exports.HRPToNetworkID = {
    custom: 0,
    axc: 1,
    test: 5,
    local: 12345
};
exports.NetworkIDToNetworkNames = {
    0: ["Custom"],
    1: ["Mainnet"],
    5: ["Testnet"],
    12345: ["Local Network"]
};
exports.NetworkNameToNetworkID = {
    Custom: 0,
    Mainnet: 1,
    Testnet: 5,
    Local: 12345,
    "Local Network": 12345
};
exports.FallbackHRP = "custom";
exports.FallbackNetworkName = "Custom Network";
exports.FallbackEVMChainID = 4000;
exports.DefaultNetworkID = 1;
exports.PlatformChainID = "11111111111111111111111111111111LpoYY";
exports.PrimaryNetworkID = "11111111111111111111111111111111LpoYY";
exports.SwapChainAlias = "Swap";
exports.AXChainAlias = "AX";
exports.CoreChainAlias = "Core";
exports.SwapChainVMName = "avm";
exports.AXChainVMName = "evm";
exports.CoreChainVMName = "platformvm";
// DO NOT use the following private keys and/or mnemonic on Testnet
// This address/account is for testing on the local avash network
exports.DefaultLocalGenesisPrivateKey = "ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
exports.DefaultEVMLocalGenesisPrivateKey = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
exports.DefaultEVMLocalGenesisAddress = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
exports.mnemonic = "output tooth keep tooth bracket fox city sustain blood raise install pond stem reject long scene clap gloom purpose mean music piece unknown light";
exports.ONEAXC = new bn_js_1.default(1000000000);
exports.DECIAXC = exports.ONEAXC.div(new bn_js_1.default(10));
exports.CENTIAXC = exports.ONEAXC.div(new bn_js_1.default(100));
exports.MILLIAXC = exports.ONEAXC.div(new bn_js_1.default(1000));
exports.MICROAXC = exports.ONEAXC.div(new bn_js_1.default(1000000));
exports.NANOAXC = exports.ONEAXC.div(new bn_js_1.default(1000000000));
exports.WEI = new bn_js_1.default(1);
exports.GWEI = exports.WEI.mul(new bn_js_1.default(1000000000));
exports.AXCGWEI = exports.NANOAXC.clone();
exports.AXCSTAKECAP = exports.ONEAXC.mul(new bn_js_1.default(3000000));
// Start Manhattan
const n0X = {
    blockchainID: "2vrXWHgGxh5n3YsLHMV16YVVJTpT4z45Fmb4y3bL6si8kLCyg9",
    alias: exports.SwapChainAlias,
    vm: exports.SwapChainVMName,
    fee: exports.MILLIAXC,
    creationTxFee: exports.CENTIAXC,
    mintTxFee: exports.MILLIAXC
};
const n0P = {
    blockchainID: exports.PlatformChainID,
    alias: exports.CoreChainAlias,
    vm: exports.CoreChainVMName,
    fee: exports.MILLIAXC,
    creationTxFee: exports.CENTIAXC,
    createAllychainTx: exports.ONEAXC,
    createChainTx: exports.ONEAXC,
    minConsumption: 0.1,
    maxConsumption: 0.12,
    maxStakingDuration: new bn_js_1.default(31536000),
    maxSupply: new bn_js_1.default(720000000).mul(exports.ONEAXC),
    minStake: exports.ONEAXC.mul(new bn_js_1.default(2000)),
    minStakeDuration: 2 * 7 * 24 * 60 * 60,
    maxStakeDuration: 365 * 24 * 60 * 60,
    minNominationStake: exports.ONEAXC.mul(new bn_js_1.default(25)),
    minNominationFee: new bn_js_1.default(2)
};
const n0C = {
    blockchainID: "2fFZQibQXcd6LTE4rpBPBAkLVXFE91Kit8pgxaBG1mRnh5xqbb",
    alias: exports.AXChainAlias,
    vm: exports.AXChainVMName,
    fee: exports.MILLIAXC,
    gasPrice: exports.GWEI.mul(new bn_js_1.default(470)),
    chainID: 43111
};
// End Manhattan
// Start mainnet
let axcAssetID = "ypDVoa1EjKYkhAA43vB1iuN1TPWzbYTVsSWFtFg996119SfZB";
const n1X = {
    blockchainID: "2gsjn1dfxHRCcc1WQZPbjRWCAp5H6Dro7hy2ZbX6b5dF8WtDRz",
    axcAssetID: axcAssetID,
    alias: exports.SwapChainAlias,
    vm: exports.SwapChainVMName,
    txFee: exports.MILLIAXC,
    creationTxFee: exports.CENTIAXC,
    mintTxFee: exports.MILLIAXC
};
const n1P = {
    blockchainID: exports.PlatformChainID,
    axcAssetID: axcAssetID,
    alias: exports.CoreChainAlias,
    vm: exports.CoreChainVMName,
    txFee: exports.MILLIAXC,
    createAllychainTx: exports.ONEAXC,
    createChainTx: exports.ONEAXC,
    creationTxFee: exports.CENTIAXC,
    minConsumption: 0.1,
    maxConsumption: 0.12,
    maxStakingDuration: new bn_js_1.default(63072000),
    maxSupply: new bn_js_1.default(180000000000).mul(exports.ONEAXC),
    minStake: exports.ONEAXC.mul(new bn_js_1.default(1000000)),
    minStakeDuration: 120 * 24 * 60 * 60,
    maxStakeDuration: 2 * 365 * 24 * 60 * 60,
    minNominationStake: exports.ONEAXC.mul(new bn_js_1.default(20)),
    minNominationFee: new bn_js_1.default(2)
};
const n1C = {
    blockchainID: "7Dv3yn5r758b198H43SSAc5Cfqqzc6brFtqiCFHDCNDXG3Ypj",
    alias: exports.AXChainAlias,
    vm: exports.AXChainVMName,
    txBytesGas: 1,
    costPerSignature: 1000,
    // DEPRECATED - txFee
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    txFee: exports.MILLIAXC,
    // DEPRECATED - gasPrice
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    gasPrice: exports.GWEI.mul(new bn_js_1.default(225)),
    minGasPrice: exports.GWEI.mul(new bn_js_1.default(25)),
    maxGasPrice: exports.GWEI.mul(new bn_js_1.default(1000)),
    chainID: 4001
};
// End Mainnet
// Start Testnet
axcAssetID = "PWKAq5FttsA6RBC9FEqvexuxMEgFcLSJ2k9KQBAJwjxCSfrP9";
const n5X = {
    blockchainID: "MydqSTXUQPnfSYP4Ntb4faAnZPEm6YLmZqrXeAYPZKrtC2skY",
    axcAssetID: axcAssetID,
    alias: exports.SwapChainAlias,
    vm: exports.SwapChainVMName,
    txFee: exports.MILLIAXC,
    creationTxFee: exports.CENTIAXC,
    mintTxFee: exports.MILLIAXC
};
const n5P = {
    blockchainID: exports.PlatformChainID,
    axcAssetID: axcAssetID,
    alias: exports.CoreChainAlias,
    vm: exports.CoreChainVMName,
    txFee: exports.MILLIAXC,
    creationTxFee: exports.CENTIAXC,
    createAllychainTx: exports.ONEAXC,
    createChainTx: exports.ONEAXC,
    minConsumption: 0.1,
    maxConsumption: 0.12,
    maxStakingDuration: new bn_js_1.default(63072000),
    maxSupply: new bn_js_1.default(180000000000).mul(exports.ONEAXC),
    minStake: exports.ONEAXC.mul(new bn_js_1.default(1000000)),
    minStakeDuration: 120 * 24 * 60 * 60,
    maxStakeDuration: 2 * 365 * 24 * 60 * 60,
    minNominationStake: exports.ONEAXC.mul(new bn_js_1.default(20)),
    minNominationFee: new bn_js_1.default(2)
};
const n5C = {
    blockchainID: "2FxLTzBfdifgZhseyFGkTscsgW2xtReT2cG2oSJemmBWJJnQg2",
    alias: exports.AXChainAlias,
    vm: exports.AXChainVMName,
    txBytesGas: 1,
    costPerSignature: 1000,
    // DEPRECATED - txFee
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    txFee: exports.MILLIAXC,
    // DEPRECATED - gasPrice
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    gasPrice: exports.GWEI.mul(new bn_js_1.default(225)),
    minGasPrice: exports.GWEI.mul(new bn_js_1.default(25)),
    maxGasPrice: exports.GWEI.mul(new bn_js_1.default(1000)),
    chainID: 4000
};
// End Testnet
// Start local network
axcAssetID = "2fombhL7aGPwj3KH4bfrmJwW6PVnMobf9Y2fn9GwxiAAJyFDbe";
const n12345X = Object.assign({}, n5X);
n12345X.blockchainID = "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed";
n12345X.axcAssetID = axcAssetID;
const n12345P = Object.assign({}, n5P);
n12345P.blockchainID = exports.PlatformChainID;
const n12345C = Object.assign({}, n5C);
n12345C.blockchainID = "2CA6j5zYzasynPsFeNoqWkmTCt3VScMvXUZHbfDJ8k3oGzAPtU";
n12345C.axcAssetID = axcAssetID;
n12345C.chainID = 43112;
// End local network
class Defaults {
}
exports.Defaults = Defaults;
Defaults.network = {
    0: {
        hrp: exports.NetworkIDToHRP[0],
        Swap: n0X,
        "2vrXWHgGxh5n3YsLHMV16YVVJTpT4z45Fmb4y3bL6si8kLCyg9": n0X,
        Core: n0P,
        "11111111111111111111111111111111LpoYY": n0P,
        AX: n0C,
        "2fFZQibQXcd6LTE4rpBPBAkLVXFE91Kit8pgxaBG1mRnh5xqbb": n0C
    },
    1: {
        hrp: exports.NetworkIDToHRP[1],
        Swap: n1X,
        "2gsjn1dfxHRCcc1WQZPbjRWCAp5H6Dro7hy2ZbX6b5dF8WtDRz": n1X,
        Core: n1P,
        "11111111111111111111111111111111LpoYY": n1P,
        AX: n1C,
        "7Dv3yn5r758b198H43SSAc5Cfqqzc6brFtqiCFHDCNDXG3Ypj": n1C
    },
    5: {
        hrp: exports.NetworkIDToHRP[5],
        Swap: n5X,
        "MydqSTXUQPnfSYP4Ntb4faAnZPEm6YLmZqrXeAYPZKrtC2skY": n5X,
        Core: n5P,
        "11111111111111111111111111111111LpoYY": n5P,
        AX: n5C,
        "2FxLTzBfdifgZhseyFGkTscsgW2xtReT2cG2oSJemmBWJJnQg2": n5C
    },
    12345: {
        hrp: exports.NetworkIDToHRP[12345],
        Swap: n12345X,
        "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed": n12345X,
        Core: n12345P,
        "11111111111111111111111111111111LpoYY": n12345P,
        AX: n12345C,
        "2CA6j5zYzasynPsFeNoqWkmTCt3VScMvXUZHbfDJ8k3oGzAPtU": n12345C
    }
};
//# sourceMappingURL=data:application/json;base64,