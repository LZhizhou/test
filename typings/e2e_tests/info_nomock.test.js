"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("Info", () => {
    const axia = (0, e2etestlib_1.getAxia)();
    const info = axia.Info();
    // test_name          response_promise               resp_fn                 matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "getBlockchainID",
            () => info.getBlockchainID("Swap"),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "qzfF3A11KzpcHkkqznEyQgupQrCNS6WV6fTUTwZpEKqhj1QE7"
        ],
        [
            "getNetworkID",
            () => info.getNetworkID(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "1337"
        ],
        [
            "getNetworkName",
            () => info.getNetworkName(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "network-1337"
        ],
        [
            "getNodeId",
            () => info.getNodeID(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg"
        ],
        [
            "getNodeVersion",
            () => info.getNodeVersion(),
            (x) => x,
            e2etestlib_1.Matcher.toMatch,
            () => /^axia\/\d*\.\d*\.\d*$/
        ],
        [
            "isBootstrapped",
            () => info.isBootstrapped("Swap"),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        ["peers", () => info.peers(), (x) => x.length, e2etestlib_1.Matcher.toBe, () => 4],
        [
            "getTxFee1",
            () => info.getTxFee(),
            (x) => x.txFee,
            e2etestlib_1.Matcher.toEqual,
            () => new bn_js_1.default(1000000)
        ],
        [
            "getTxFee2",
            () => info.getTxFee(),
            (x) => x.creationTxFee,
            e2etestlib_1.Matcher.toEqual,
            () => new bn_js_1.default(1000000)
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mb19ub21vY2sudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2UyZV90ZXN0cy9pbmZvX25vbW9jay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkNBQTREO0FBRTVELGtEQUFzQjtBQUd0QixRQUFRLENBQUMsTUFBTSxFQUFFLEdBQVMsRUFBRTtJQUMxQixNQUFNLElBQUksR0FBUyxJQUFBLG9CQUFPLEdBQUUsQ0FBQTtJQUM1QixNQUFNLElBQUksR0FBWSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFFakMsNEhBQTRIO0lBQzVILE1BQU0sVUFBVSxHQUFRO1FBQ3RCO1lBQ0UsaUJBQWlCO1lBQ2pCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsbURBQW1EO1NBQzFEO1FBQ0Q7WUFDRSxjQUFjO1lBQ2QsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUN6QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLE1BQU07U0FDYjtRQUNEO1lBQ0UsZ0JBQWdCO1lBQ2hCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDM0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxjQUFjO1NBQ3JCO1FBQ0Q7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUN0QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLDBDQUEwQztTQUNqRDtRQUNEO1lBQ0UsZ0JBQWdCO1lBQ2hCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDM0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyx1QkFBdUI7U0FDOUI7UUFDRDtZQUNFLGdCQUFnQjtZQUNoQixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztZQUNqQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDWDtRQUNELENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxvQkFBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDckU7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNyQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUs7WUFDZCxvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDdEI7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYTtZQUN0QixvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDdEI7S0FDRixDQUFBO0lBRUQsSUFBQSx3QkFBVyxFQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3pCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXhpYSwgY3JlYXRlVGVzdHMsIE1hdGNoZXIgfSBmcm9tIFwiLi9lMmV0ZXN0bGliXCJcbmltcG9ydCB7IEluZm9BUEkgfSBmcm9tIFwic3JjL2FwaXMvaW5mby9hcGlcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgQXhpYSBmcm9tIFwic3JjXCJcblxuZGVzY3JpYmUoXCJJbmZvXCIsICgpOiB2b2lkID0+IHtcbiAgY29uc3QgYXhpYTogQXhpYSA9IGdldEF4aWEoKVxuICBjb25zdCBpbmZvOiBJbmZvQVBJID0gYXhpYS5JbmZvKClcblxuICAvLyB0ZXN0X25hbWUgICAgICAgICAgcmVzcG9uc2VfcHJvbWlzZSAgICAgICAgICAgICAgIHJlc3BfZm4gICAgICAgICAgICAgICAgIG1hdGNoZXIgICAgICAgICAgIGV4cGVjdGVkX3ZhbHVlL29idGFpbmVkX3ZhbHVlXG4gIGNvbnN0IHRlc3RzX3NwZWM6IGFueSA9IFtcbiAgICBbXG4gICAgICBcImdldEJsb2NrY2hhaW5JRFwiLFxuICAgICAgKCkgPT4gaW5mby5nZXRCbG9ja2NoYWluSUQoXCJTd2FwXCIpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcInF6ZkYzQTExS3pwY0hra3F6bkV5UWd1cFFyQ05TNldWNmZUVVR3WnBFS3FoajFRRTdcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXROZXR3b3JrSURcIixcbiAgICAgICgpID0+IGluZm8uZ2V0TmV0d29ya0lEKCksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IFwiMTMzN1wiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdldE5ldHdvcmtOYW1lXCIsXG4gICAgICAoKSA9PiBpbmZvLmdldE5ldHdvcmtOYW1lKCksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IFwibmV0d29yay0xMzM3XCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ2V0Tm9kZUlkXCIsXG4gICAgICAoKSA9PiBpbmZvLmdldE5vZGVJRCgpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIk5vZGVJRC03WGh3Mm1EeHVEUzQ0ajQyVENCNlU1NTc5ZXNiU3QzTGdcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXROb2RlVmVyc2lvblwiLFxuICAgICAgKCkgPT4gaW5mby5nZXROb2RlVmVyc2lvbigpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvTWF0Y2gsXG4gICAgICAoKSA9PiAvXmF4aWFcXC9cXGQqXFwuXFxkKlxcLlxcZCokL1xuICAgIF0sXG4gICAgW1xuICAgICAgXCJpc0Jvb3RzdHJhcHBlZFwiLFxuICAgICAgKCkgPT4gaW5mby5pc0Jvb3RzdHJhcHBlZChcIlN3YXBcIiksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IHRydWVcbiAgICBdLFxuICAgIFtcInBlZXJzXCIsICgpID0+IGluZm8ucGVlcnMoKSwgKHgpID0+IHgubGVuZ3RoLCBNYXRjaGVyLnRvQmUsICgpID0+IDRdLFxuICAgIFtcbiAgICAgIFwiZ2V0VHhGZWUxXCIsXG4gICAgICAoKSA9PiBpbmZvLmdldFR4RmVlKCksXG4gICAgICAoeCkgPT4geC50eEZlZSxcbiAgICAgIE1hdGNoZXIudG9FcXVhbCxcbiAgICAgICgpID0+IG5ldyBCTigxMDAwMDAwKVxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXRUeEZlZTJcIixcbiAgICAgICgpID0+IGluZm8uZ2V0VHhGZWUoKSxcbiAgICAgICh4KSA9PiB4LmNyZWF0aW9uVHhGZWUsXG4gICAgICBNYXRjaGVyLnRvRXF1YWwsXG4gICAgICAoKSA9PiBuZXcgQk4oMTAwMDAwMClcbiAgICBdXG4gIF1cblxuICBjcmVhdGVUZXN0cyh0ZXN0c19zcGVjKVxufSkiXX0=