"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const api_1 = require("src/apis/keystore/api");
const bn_js_1 = __importDefault(require("bn.js"));
describe("CoreChain", () => {
    let tx = { value: "" };
    let addrB = { value: "" };
    let addrC = { value: "" };
    let createdAllychainID = { value: "" };
    const axia = (0, e2etestlib_1.getAxia)();
    const corechain = axia.CoreChain();
    const keystore = new api_1.KeystoreAPI(axia);
    const now = new Date().getTime();
    const startTime = new Date(now + 800);
    const endTime = new Date(now + 50000);
    const stakeAmount = new bn_js_1.default(200000000000);
    const user = "axiaJscoreChainUser";
    const passwd = "axiaJsP@ssw4rd";
    const badUser = "asdfasdfsa";
    const badPass = "pass";
    const memo = "hello world";
    const whaleAddr = "Core-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    const nodeID = "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg";
    const allychainID = "2bGsYJorY6X7RhjPBFs3kYjiNEHo4zGrD2eeyZbb43T2KKi7fM";
    const swapChainAddr = "Swap-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p";
    const axiaBlockChainID = "2VvmkRw4yrz8tPrVnCCbvEK1JxNyujpqhmU6SGonxMpkWBx9UD";
    const rewardUTXOTxID = "2nmH8LithVbdjaXsxVQCQfXtzN9hBbmebrsaEYnLM9T32Uy2Y4";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "createaddrB",
            () => corechain.createAddress(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => addrB
        ],
        [
            "createaddrC",
            () => corechain.createAddress(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => addrC
        ],
        [
            "incorrectUser",
            () => corechain.listAddresses(badUser, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => `problem retrieving user "${badUser}": incorrect password for user "${badUser}"`
        ],
        [
            "incorrectPass",
            () => corechain.listAddresses(user, badPass),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => `problem retrieving user "${user}": incorrect password for user "${user}"`
        ],
        [
            "getBalance",
            () => corechain.getBalance(whaleAddr),
            (x) => x.balance,
            e2etestlib_1.Matcher.toBe,
            () => "30000000000000000"
        ],
        [
            "getBalance2",
            () => corechain.getBalance(whaleAddr),
            (x) => x.utxoIDs[0].txID,
            e2etestlib_1.Matcher.toBe,
            () => "11111111111111111111111111111111LpoYY"
        ],
        [
            "getBlockchainsC",
            () => corechain.getBlockchains(),
            (x) => x[0].id,
            e2etestlib_1.Matcher.toBe,
            () => "BR28ypgLATNS6PbtHMiJ7NQ61vfpT27Hj8tAcZ1AHsfU5cz88"
        ],
        [
            "getBlockchainsX",
            () => corechain.getBlockchains(),
            (x) => x[1].id,
            e2etestlib_1.Matcher.toBe,
            () => "qzfF3A11KzpcHkkqznEyQgupQrCNS6WV6fTUTwZpEKqhj1QE7"
        ],
        [
            "getBlockchainStatus",
            () => corechain.getBlockchainStatus(axiaBlockChainID),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "Created"
        ],
        [
            "getCurrentSupply",
            () => corechain.getCurrentSupply(),
            (x) => {
                return x.toString();
            },
            e2etestlib_1.Matcher.toBe,
            () => "361196333750752149"
        ],
        [
            "getHeight",
            () => corechain.getHeight(),
            (x) => x.toString(),
            e2etestlib_1.Matcher.toEqual,
            () => "0"
        ],
        [
            "getMinStake",
            () => corechain.getMinStake(),
            (x) => {
                return x.minNominatorStake.toString();
            },
            e2etestlib_1.Matcher.toBe,
            () => "25000000000"
        ],
        [
            "importKey",
            () => corechain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "listAddrs",
            () => corechain.listAddresses(user, passwd),
            (x) => x.sort(),
            e2etestlib_1.Matcher.toEqual,
            () => [whaleAddr, addrB.value, addrC.value].sort()
        ],
        [
            "createAllychain",
            () => corechain.createAllychain(user, passwd, [whaleAddr], 1),
            (x) => {
                return x;
            },
            e2etestlib_1.Matcher.Get,
            () => createdAllychainID
        ],
        [
            "getCurrentValidators",
            () => corechain.getCurrentValidators(),
            (x) => x.validators.length,
            e2etestlib_1.Matcher.toBe,
            () => 5
        ],
        [
            "getRewardUTXOs",
            () => corechain.getRewardUTXOs(rewardUTXOTxID),
            (x) => x.utxos.length,
            e2etestlib_1.Matcher.toBe,
            () => 0
        ],
        [
            "getStakeOutputs",
            () => corechain.getStake([whaleAddr]),
            (x) => x.stakedOutputs.length,
            e2etestlib_1.Matcher.toBe,
            () => 0
        ],
        [
            "getStake",
            () => corechain.getStake([whaleAddr]),
            (x) => x.staked.toString(),
            e2etestlib_1.Matcher.toBe,
            () => "0"
        ],
        [
            "addNominator",
            () => corechain.addNominator(user, passwd, nodeID, startTime, endTime, stakeAmount, whaleAddr),
            (x) => {
                return x;
            },
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument. Ensure arguments are valid and properly formatted. See documentation for example calls"
        ],
        [
            "addValidator",
            () => corechain.addValidator(user, passwd, nodeID, startTime, endTime, stakeAmount, whaleAddr, new bn_js_1.default(10)),
            (x) => {
                return x;
            },
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument. Ensure arguments are valid and properly formatted. See documentation for example calls"
        ],
        [
            "exportKey",
            () => corechain.exportKey(user, passwd, addrB.value),
            (x) => x,
            e2etestlib_1.Matcher.toMatch,
            () => /PrivateKey-\w*/
        ],
        // [
        //   "exportAXC",
        //   () => corechain.exportAXC(user, passwd, new BN(10), swapChainAddr),
        //   (x) => x,
        //   Matcher.toThrow,
        //   () =>
        //     "failed semanticVerifySpend: failed to read consumed UTXO 11111111111111111111111111111111LpoYY:0 due to: not found"
        // ],
        [
            "getTx",
            () => corechain.getTx(tx.value),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument. Ensure arguments are valid and properly formatted. See documentation for example calls"
        ],
        [
            "getTxStatus",
            () => corechain.getTxStatus("2JxmsgSJxMrddRUsKCxAagdvax3s6kY9xiivyzHRMqFfuRjFi2"),
            (x) => x,
            e2etestlib_1.Matcher.toEqual,
            () => ({ status: "Unknown" })
        ],
        [
            "importAXC",
            () => corechain.importAXC(user, passwd, addrB.value, "Swap"),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "no spendable funds were found"
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,