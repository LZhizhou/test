"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const api_1 = require("src/apis/keystore/api");
const bn_js_1 = __importDefault(require("bn.js"));
describe("SwapChain", () => {
    let tx = { value: "" };
    let asset = { value: "" };
    let addrB = { value: "" };
    let addrC = { value: "" };
    const axia = (0, e2etestlib_1.getAxia)();
    const swapchain = axia.SwapChain();
    const keystore = new api_1.KeystoreAPI(axia);
    const user = "axiaJsSwapChainUser";
    const passwd = "axiaJsP1ssw4rd";
    const badUser = "asdfasdfsa";
    const badPass = "pass";
    const memo = "hello world";
    const whaleAddr = "Swap-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "createaddrB",
            () => swapchain.createAddress(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => addrB
        ],
        [
            "createaddrB",
            () => swapchain.createAddress(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => addrC
        ],
        [
            "incorrectUser",
            () => swapchain.send(badUser, passwd, "AXC", 10, addrB.value, [addrC.value], addrB.value, memo),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => `problem retrieving user "${badUser}": incorrect password for user "${badUser}"`
        ],
        [
            "incorrectPass",
            () => swapchain.send(user, badPass, "AXC", 10, addrB.value, [addrC.value], addrB.value, memo),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => `problem retrieving user "${user}": incorrect password for user "${user}"`
        ],
        [
            "getBalance",
            () => swapchain.getBalance(whaleAddr, "AXC"),
            (x) => x.balance,
            e2etestlib_1.Matcher.toBe,
            () => "300000000000000000"
        ],
        [
            "getBalance2",
            () => swapchain.getBalance(whaleAddr, "AXC"),
            (x) => x.utxoIDs[0].txID,
            e2etestlib_1.Matcher.toBe,
            () => "BUuypiq2wyuLMvyhzFXcPyxPMCgSp7eeDohhQRqTChoBjKziC"
        ],
        [
            "importKey",
            () => swapchain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "send",
            () => swapchain.send(user, passwd, "AXC", 10, addrB.value, [whaleAddr], whaleAddr, memo),
            (x) => x.txID,
            e2etestlib_1.Matcher.Get,
            () => tx
        ],
        [
            "sendMultiple",
            () => swapchain.sendMultiple(user, passwd, [
                { assetID: "AXC", amount: 10, to: addrB.value },
                { assetID: "AXC", amount: 20, to: addrC.value }
            ], [whaleAddr], whaleAddr, memo),
            (x) => x.txID,
            e2etestlib_1.Matcher.Get,
            () => tx
        ],
        [
            "listAddrs",
            () => swapchain.listAddresses(user, passwd),
            (x) => x.sort(),
            e2etestlib_1.Matcher.toEqual,
            () => [whaleAddr, addrB.value, addrC.value].sort()
        ],
        [
            "exportKey",
            () => swapchain.exportKey(user, passwd, addrB.value),
            (x) => x,
            e2etestlib_1.Matcher.toMatch,
            () => /PrivateKey-\w*/
        ],
        [
            "export",
            () => swapchain.export(user, passwd, "AX" + addrB.value.substring(1), new bn_js_1.default(10), "AXC"),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument"
        ],
        [
            "import",
            () => swapchain.import(user, passwd, addrB.value, "Core"),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "problem issuing transaction: no import inputs"
        ],
        [
            "createFixed",
            () => swapchain.createFixedCapAsset(user, passwd, "Some Coin", "SCC", 0, [
                { address: whaleAddr, amount: "10000" }
            ]),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => asset
        ],
        [
            "createVar",
            () => swapchain.createVariableCapAsset(user, passwd, "Some Coin", "SCC", 0, [
                { minters: [whaleAddr], threshold: 1 }
            ]),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => asset
        ],
        [
            "mint",
            () => swapchain.mint(user, passwd, 1500, asset.value, addrB.value, [whaleAddr]),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument"
        ],
        [
            "getTx",
            () => swapchain.getTx(tx.value),
            (x) => x,
            e2etestlib_1.Matcher.toMatch,
            () => /\w+/
        ],
        [
            "getTxStatus",
            () => swapchain.getTxStatus(tx.value),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "Processing"
        ],
        [
            "getAssetDesc",
            () => swapchain.getAssetDescription(asset.value),
            (x) => [x.name, x.symbol],
            e2etestlib_1.Matcher.toEqual,
            () => ["Some Coin", "SCC"]
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,