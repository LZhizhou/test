"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("AppChain", () => {
    const axia = (0, e2etestlib_1.getAxia)();
    const appchain = axia.AppChain();
    const keystore = axia.NodeKeys();
    let exportTxHash = { value: "" };
    const user = "axiaJsAppChainUser";
    const passwd = "axiaJsP@ssw4rd";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    const privateKeyHex = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
    const whaleAddr = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
    const assetChainAddr = "X-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "importKey",
            () => appchain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "exportAXC",
            () => appchain.exportAXC(user, passwd, assetChainAddr, new bn_js_1.default(10)),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => exportTxHash
        ],
        [
            "getBaseFee",
            () => appchain.getBaseFee(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x34630b8a00"
        ],
        [
            "getMaxPriorityFeePerGas",
            () => appchain.getMaxPriorityFeePerGas(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x0"
        ],
        [
            "exportKey",
            () => appchain.exportKey(user, passwd, whaleAddr),
            (x) => x,
            e2etestlib_1.Matcher.toEqual,
            () => ({
                privateKey: key,
                privateKeyHex: privateKeyHex
            })
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwY2hhaW5fbm9tb2NrLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9lMmVfdGVzdHMvYXBwY2hhaW5fbm9tb2NrLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2Q0FBNEQ7QUFFNUQsa0RBQXNCO0FBSXRCLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBUyxFQUFFO0lBQzlCLE1BQU0sSUFBSSxHQUFTLElBQUEsb0JBQU8sR0FBRSxDQUFBO0lBQzVCLE1BQU0sUUFBUSxHQUFXLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN4QyxNQUFNLFFBQVEsR0FBZ0IsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBRTdDLElBQUksWUFBWSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFBO0lBRWhDLE1BQU0sSUFBSSxHQUFXLG9CQUFvQixDQUFBO0lBQ3pDLE1BQU0sTUFBTSxHQUFXLGdCQUFnQixDQUFBO0lBQ3ZDLE1BQU0sR0FBRyxHQUNQLDhEQUE4RCxDQUFBO0lBQ2hFLE1BQU0sYUFBYSxHQUNqQixvRUFBb0UsQ0FBQTtJQUN0RSxNQUFNLFNBQVMsR0FBVyw0Q0FBNEMsQ0FBQTtJQUN0RSxNQUFNLGNBQWMsR0FBVyxpREFBaUQsQ0FBQTtJQUVoRixnSUFBZ0k7SUFDaEksTUFBTSxVQUFVLEdBQVE7UUFDdEI7WUFDRSxZQUFZO1lBQ1osR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsSUFBSTtTQUNYO1FBQ0Q7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQztZQUMzQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLFNBQVM7U0FDaEI7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLElBQUksZUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxHQUFHO1lBQ1gsR0FBRyxFQUFFLENBQUMsWUFBWTtTQUNuQjtRQUNEO1lBQ0UsWUFBWTtZQUNaLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUU7WUFDM0IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxjQUFjO1NBQ3JCO1FBQ0Q7WUFDRSx5QkFBeUI7WUFDekIsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFO1lBQ3hDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsS0FBSztTQUNaO1FBQ0Q7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQztZQUNqRCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsT0FBTztZQUNmLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsYUFBYSxFQUFFLGFBQWE7YUFDN0IsQ0FBQztTQUNIO0tBQ0YsQ0FBQTtJQUVELElBQUEsd0JBQVcsRUFBQyxVQUFVLENBQUMsQ0FBQTtBQUN6QixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEF4aWEsIGNyZWF0ZVRlc3RzLCBNYXRjaGVyIH0gZnJvbSBcIi4vZTJldGVzdGxpYlwiXG5pbXBvcnQgeyBLZXlzdG9yZUFQSSB9IGZyb20gXCJzcmMvYXBpcy9rZXlzdG9yZS9hcGlcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5pbXBvcnQgQXhpYSBmcm9tIFwic3JjXCJcbmltcG9ydCB7IEVWTUFQSSB9IGZyb20gXCJzcmMvYXBpcy9ldm1cIlxuXG5kZXNjcmliZShcIkFwcENoYWluXCIsICgpOiB2b2lkID0+IHtcbiAgY29uc3QgYXhpYTogQXhpYSA9IGdldEF4aWEoKVxuICBjb25zdCBhcHBjaGFpbjogRVZNQVBJID0gYXhpYS5BcHBDaGFpbigpXG4gIGNvbnN0IGtleXN0b3JlOiBLZXlzdG9yZUFQSSA9IGF4aWEuTm9kZUtleXMoKVxuXG4gIGxldCBleHBvcnRUeEhhc2ggPSB7IHZhbHVlOiBcIlwiIH1cblxuICBjb25zdCB1c2VyOiBzdHJpbmcgPSBcImF4aWFKc0FwcENoYWluVXNlclwiXG4gIGNvbnN0IHBhc3N3ZDogc3RyaW5nID0gXCJheGlhSnNQQHNzdzRyZFwiXG4gIGNvbnN0IGtleTogc3RyaW5nID1cbiAgICBcIlByaXZhdGVLZXktZXdvcWpQN1B4WTR5cjNpTFRwTGlzcmlxdDk0aGR5REZOZ2NoU3hHR3p0VXJUWHROTlwiXG4gIGNvbnN0IHByaXZhdGVLZXlIZXg6IHN0cmluZyA9XG4gICAgXCIweDU2Mjg5ZTk5Yzk0YjY5MTJiZmMxMmFkYzA5M2M5YjUxMTI0ZjBkYzU0YWM3YTc2NmIyYmM1Y2NmNTU4ZDgwMjdcIlxuICBjb25zdCB3aGFsZUFkZHI6IHN0cmluZyA9IFwiMHg4ZGI5N0M3Y0VjRTI0OWMyYjk4YkRDMDIyNkNjNEMyQTU3QkY1MkZDXCJcbiAgY29uc3QgYXNzZXRDaGFpbkFkZHI6IHN0cmluZyA9IFwiWC1jdXN0b20xOGptYThwcHczbmh4NXI0YXA4Y2xhenowZHBzN3J2NXU5eGRlN3BcIlxuXG4gIC8vIHRlc3RfbmFtZSAgICAgICAgcmVzcG9uc2VfcHJvbWlzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwX2ZuICAgICAgICAgIG1hdGNoZXIgICAgICAgICAgIGV4cGVjdGVkX3ZhbHVlL29idGFpbmVkX3ZhbHVlXG4gIGNvbnN0IHRlc3RzX3NwZWM6IGFueSA9IFtcbiAgICBbXG4gICAgICBcImNyZWF0ZVVzZXJcIixcbiAgICAgICgpID0+IGtleXN0b3JlLmNyZWF0ZVVzZXIodXNlciwgcGFzc3dkKSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci50b0JlLFxuICAgICAgKCkgPT4gdHJ1ZVxuICAgIF0sXG4gICAgW1xuICAgICAgXCJpbXBvcnRLZXlcIixcbiAgICAgICgpID0+IGFwcGNoYWluLmltcG9ydEtleSh1c2VyLCBwYXNzd2QsIGtleSksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IHdoYWxlQWRkclxuICAgIF0sXG4gICAgW1xuICAgICAgXCJleHBvcnRBWENcIixcbiAgICAgICgpID0+IGFwcGNoYWluLmV4cG9ydEFYQyh1c2VyLCBwYXNzd2QsIGFzc2V0Q2hhaW5BZGRyLCBuZXcgQk4oMTApKSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci5HZXQsXG4gICAgICAoKSA9PiBleHBvcnRUeEhhc2hcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ2V0QmFzZUZlZVwiLFxuICAgICAgKCkgPT4gYXBwY2hhaW4uZ2V0QmFzZUZlZSgpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIjB4MzQ2MzBiOGEwMFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdldE1heFByaW9yaXR5RmVlUGVyR2FzXCIsXG4gICAgICAoKSA9PiBhcHBjaGFpbi5nZXRNYXhQcmlvcml0eUZlZVBlckdhcygpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIjB4MFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImV4cG9ydEtleVwiLFxuICAgICAgKCkgPT4gYXBwY2hhaW4uZXhwb3J0S2V5KHVzZXIsIHBhc3N3ZCwgd2hhbGVBZGRyKSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci50b0VxdWFsLFxuICAgICAgKCkgPT4gKHtcbiAgICAgICAgcHJpdmF0ZUtleToga2V5LFxuICAgICAgICBwcml2YXRlS2V5SGV4OiBwcml2YXRlS2V5SGV4XG4gICAgICB9KVxuICAgIF1cbiAgXVxuXG4gIGNyZWF0ZVRlc3RzKHRlc3RzX3NwZWMpXG59KSJdfQ==