"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("AXChain", () => {
    const axia = (0, e2etestlib_1.getAxia)();
    const axchain = axia.AXChain();
    const keystore = axia.NodeKeys();
    let exportTxHash = { value: "" };
    const user = "axiaJsAXChainUser";
    const passwd = "axiaJsP@ssw4rd";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    const privateKeyHex = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
    const whaleAddr = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
    const swapChainAddr = "Swap-custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "importKey",
            () => axchain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "exportAXC",
            () => axchain.exportAXC(user, passwd, swapChainAddr, new bn_js_1.default(10)),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => exportTxHash
        ],
        [
            "getBaseFee",
            () => axchain.getBaseFee(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x34630b8a00"
        ],
        [
            "getMaxPriorityFeePerGas",
            () => axchain.getMaxPriorityFeePerGas(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x0"
        ],
        [
            "exportKey",
            () => axchain.exportKey(user, passwd, whaleAddr),
            (x) => x,
            e2etestlib_1.Matcher.toEqual,
            () => ({
                privateKey: key,
                privateKeyHex: privateKeyHex
            })
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXhjaGFpbl9ub21vY2sudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2UyZV90ZXN0cy9heGNoYWluX25vbW9jay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkNBQTREO0FBRTVELGtEQUFzQjtBQUl0QixRQUFRLENBQUMsU0FBUyxFQUFFLEdBQVMsRUFBRTtJQUM3QixNQUFNLElBQUksR0FBUyxJQUFBLG9CQUFPLEdBQUUsQ0FBQTtJQUM1QixNQUFNLE9BQU8sR0FBVyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDdEMsTUFBTSxRQUFRLEdBQWdCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUU3QyxJQUFJLFlBQVksR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQTtJQUVoQyxNQUFNLElBQUksR0FBVyxtQkFBbUIsQ0FBQTtJQUN4QyxNQUFNLE1BQU0sR0FBVyxnQkFBZ0IsQ0FBQTtJQUN2QyxNQUFNLEdBQUcsR0FDUCw4REFBOEQsQ0FBQTtJQUNoRSxNQUFNLGFBQWEsR0FDakIsb0VBQW9FLENBQUE7SUFDdEUsTUFBTSxTQUFTLEdBQVcsNENBQTRDLENBQUE7SUFDdEUsTUFBTSxhQUFhLEdBQVcsb0RBQW9ELENBQUE7SUFFbEYsZ0lBQWdJO0lBQ2hJLE1BQU0sVUFBVSxHQUFRO1FBQ3RCO1lBQ0UsWUFBWTtZQUNaLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztZQUN2QyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLElBQUk7U0FDWDtRQUNEO1lBQ0UsV0FBVztZQUNYLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUM7WUFDMUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxTQUFTO1NBQ2hCO1FBQ0Q7WUFDRSxXQUFXO1lBQ1gsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLGVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsR0FBRztZQUNYLEdBQUcsRUFBRSxDQUFDLFlBQVk7U0FDbkI7UUFDRDtZQUNFLFlBQVk7WUFDWixHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQzFCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsY0FBYztTQUNyQjtRQUNEO1lBQ0UseUJBQXlCO1lBQ3pCLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRTtZQUN2QyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLEtBQUs7U0FDWjtRQUNEO1lBQ0UsV0FBVztZQUNYLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUM7WUFDaEQsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLE9BQU87WUFDZixHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLGFBQWEsRUFBRSxhQUFhO2FBQzdCLENBQUM7U0FDSDtLQUNGLENBQUE7SUFFRCxJQUFBLHdCQUFXLEVBQUMsVUFBVSxDQUFDLENBQUE7QUFDekIsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRBeGlhLCBjcmVhdGVUZXN0cywgTWF0Y2hlciB9IGZyb20gXCIuL2UyZXRlc3RsaWJcIlxuaW1wb3J0IHsgS2V5c3RvcmVBUEkgfSBmcm9tIFwic3JjL2FwaXMva2V5c3RvcmUvYXBpXCJcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIlxuaW1wb3J0IEF4aWEgZnJvbSBcInNyY1wiXG5pbXBvcnQgeyBFVk1BUEkgfSBmcm9tIFwic3JjL2FwaXMvZXZtXCJcblxuZGVzY3JpYmUoXCJBWENoYWluXCIsICgpOiB2b2lkID0+IHtcbiAgY29uc3QgYXhpYTogQXhpYSA9IGdldEF4aWEoKVxuICBjb25zdCBheGNoYWluOiBFVk1BUEkgPSBheGlhLkFYQ2hhaW4oKVxuICBjb25zdCBrZXlzdG9yZTogS2V5c3RvcmVBUEkgPSBheGlhLk5vZGVLZXlzKClcblxuICBsZXQgZXhwb3J0VHhIYXNoID0geyB2YWx1ZTogXCJcIiB9XG5cbiAgY29uc3QgdXNlcjogc3RyaW5nID0gXCJheGlhSnNBWENoYWluVXNlclwiXG4gIGNvbnN0IHBhc3N3ZDogc3RyaW5nID0gXCJheGlhSnNQQHNzdzRyZFwiXG4gIGNvbnN0IGtleTogc3RyaW5nID1cbiAgICBcIlByaXZhdGVLZXktZXdvcWpQN1B4WTR5cjNpTFRwTGlzcmlxdDk0aGR5REZOZ2NoU3hHR3p0VXJUWHROTlwiXG4gIGNvbnN0IHByaXZhdGVLZXlIZXg6IHN0cmluZyA9XG4gICAgXCIweDU2Mjg5ZTk5Yzk0YjY5MTJiZmMxMmFkYzA5M2M5YjUxMTI0ZjBkYzU0YWM3YTc2NmIyYmM1Y2NmNTU4ZDgwMjdcIlxuICBjb25zdCB3aGFsZUFkZHI6IHN0cmluZyA9IFwiMHg4ZGI5N0M3Y0VjRTI0OWMyYjk4YkRDMDIyNkNjNEMyQTU3QkY1MkZDXCJcbiAgY29uc3Qgc3dhcENoYWluQWRkcjogc3RyaW5nID0gXCJTd2FwLWN1c3RvbTE4am1hOHBwdzNuaHg1cjRhcDhjbGF6ejBkcHM3cnY1dTl4ZGU3cFwiXG5cbiAgLy8gdGVzdF9uYW1lICAgICAgICByZXNwb25zZV9wcm9taXNlICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BfZm4gICAgICAgICAgbWF0Y2hlciAgICAgICAgICAgZXhwZWN0ZWRfdmFsdWUvb2J0YWluZWRfdmFsdWVcbiAgY29uc3QgdGVzdHNfc3BlYzogYW55ID0gW1xuICAgIFtcbiAgICAgIFwiY3JlYXRlVXNlclwiLFxuICAgICAgKCkgPT4ga2V5c3RvcmUuY3JlYXRlVXNlcih1c2VyLCBwYXNzd2QpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiB0cnVlXG4gICAgXSxcbiAgICBbXG4gICAgICBcImltcG9ydEtleVwiLFxuICAgICAgKCkgPT4gYXhjaGFpbi5pbXBvcnRLZXkodXNlciwgcGFzc3dkLCBrZXkpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiB3aGFsZUFkZHJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZXhwb3J0QVhDXCIsXG4gICAgICAoKSA9PiBheGNoYWluLmV4cG9ydEFYQyh1c2VyLCBwYXNzd2QsIHN3YXBDaGFpbkFkZHIsIG5ldyBCTigxMCkpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLkdldCxcbiAgICAgICgpID0+IGV4cG9ydFR4SGFzaFxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXRCYXNlRmVlXCIsXG4gICAgICAoKSA9PiBheGNoYWluLmdldEJhc2VGZWUoKSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci50b0JlLFxuICAgICAgKCkgPT4gXCIweDM0NjMwYjhhMDBcIlxuICAgIF0sXG4gICAgW1xuICAgICAgXCJnZXRNYXhQcmlvcml0eUZlZVBlckdhc1wiLFxuICAgICAgKCkgPT4gYXhjaGFpbi5nZXRNYXhQcmlvcml0eUZlZVBlckdhcygpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIjB4MFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImV4cG9ydEtleVwiLFxuICAgICAgKCkgPT4gYXhjaGFpbi5leHBvcnRLZXkodXNlciwgcGFzc3dkLCB3aGFsZUFkZHIpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvRXF1YWwsXG4gICAgICAoKSA9PiAoe1xuICAgICAgICBwcml2YXRlS2V5OiBrZXksXG4gICAgICAgIHByaXZhdGVLZXlIZXg6IHByaXZhdGVLZXlIZXhcbiAgICAgIH0pXG4gICAgXVxuICBdXG5cbiAgY3JlYXRlVGVzdHModGVzdHNfc3BlYylcbn0pIl19