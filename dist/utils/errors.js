"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllychainAddressError = exports.AllychainThresholdError = exports.AllychainIdError = exports.ProtocolError = exports.InvalidEntropy = exports.EVMFeeError = exports.Bech32Error = exports.UnknownTypeError = exports.TypeNameError = exports.TypeIdError = exports.HexError = exports.NodeIdError = exports.PrivateKeyError = exports.Base58Error = exports.MergeRuleError = exports.PublicKeyError = exports.AddressIndexError = exports.BufferSizeError = exports.AllychainOwnerError = exports.NominationFeeError = exports.TimeError = exports.StakeError = exports.FeeAssetError = exports.EVMOutputError = exports.EVMInputError = exports.SECPMintOutputError = exports.ThresholdError = exports.InsufficientFundsError = exports.UTXOError = exports.OutputIdError = exports.ChecksumError = exports.InvalidOperationIdError = exports.OperationError = exports.InputIdError = exports.TransferableInputError = exports.TransferableOutputError = exports.CredIdError = exports.CodecIdError = exports.TransactionError = exports.NameError = exports.SymbolError = exports.NoAtomicUTXOsError = exports.ChainIdError = exports.GooseEggCheckError = exports.AddressError = exports.AxiaError = void 0;
const ADDRESS_ERROR_CODE = "1000";
const GOOSE_EGG_CHECK_ERROR_CODE = "1001";
const CHAIN_ID_ERROR_CODE = "1002";
const NO_ATOMIX_UTXOS_ERROR_CODE = "1003";
const SYMBOL_ERROR_CODE = "1004";
const NAME_ERROR_CODE = "1005";
const TRANSACTION_ERROR_CODE = "1006";
const CODEC_ID_ERROR_CODE = "1007";
const CRED_ID_ERROR_CODE = "1008";
const TRANSFERABLE_OUTPUT_ERROR_CODE = "1009";
const TRANSFERABLE_INPUT_ERROR_CODE = "1010";
const INPUT_ID_ERROR_CODE = "1011";
const OPERATION_ERROR_CODE = "1012";
const INVALID_OPERATION_ID_CODE = "1013";
const CHECKSUM_ERROR_CODE = "1014";
const OUTPUT_ID_ERROR_CODE = "1015";
const UTXO_ERROR_CODE = "1016";
const INSUFFICIENT_FUNDS_ERROR_CODE = "1017";
const THRESHOLD_ERROR_CODE = "1018";
const SECP_MINT_OUTPUT_ERROR_CODE = "1019";
const EVM_INPUT_ERROR_CODE = "1020";
const EVM_OUTPUT_ERROR_CODE = "1021";
const FEE_ASSET_ERROR_CODE = "1022";
const STAKE_ERROR_CODE = "1023";
const TIME_ERROR_CODE = "1024";
const NOMINATION_FEE_ERROR_CODE = "1025";
const ALLYCHAIN_OWNER_ERROR_CODE = "1026";
const BUFFER_SIZE_ERROR_CODE = "1027";
const ADDRESS_INDEX_ERROR_CODE = "1028";
const PUBLIC_KEY_ERROR_CODE = "1029";
const MERGE_RULE_ERROR_CODE = "1030";
const BASE58_ERROR_CODE = "1031";
const PRIVATE_KEY_ERROR_CODE = "1032";
const NODE_ID_ERROR_CODE = "1033";
const HEX_ERROR_CODE = "1034";
const TYPE_ID_ERROR_CODE = "1035";
const UNKNOWN_TYPE_ERROR_CODE = "1036";
const BECH32_ERROR_CODE = "1037";
const EVM_FEE_ERROR_CODE = "1038";
const INVALID_ENTROPY = "1039";
const PROTOCOL_ERROR_CODE = "1040";
const ALLYCHAIN_ID_ERROR_CODE = "1041";
const TYPE_NAME_ERROR_CODE = "1042";
const ALLYCHAIN_THRESHOLD_ERROR_CODE = "1043";
const ALLYCHAIN_ADDRESS_ERROR_CODE = "1044";
class AxiaError extends Error {
    constructor(m, code) {
        super(m);
        Object.setPrototypeOf(this, AxiaError.prototype);
        this.errorCode = code;
    }
    getCode() {
        return this.errorCode;
    }
}
exports.AxiaError = AxiaError;
class AddressError extends AxiaError {
    constructor(m) {
        super(m, ADDRESS_ERROR_CODE);
        Object.setPrototypeOf(this, AddressError.prototype);
    }
}
exports.AddressError = AddressError;
class GooseEggCheckError extends AxiaError {
    constructor(m) {
        super(m, GOOSE_EGG_CHECK_ERROR_CODE);
        Object.setPrototypeOf(this, GooseEggCheckError.prototype);
    }
}
exports.GooseEggCheckError = GooseEggCheckError;
class ChainIdError extends AxiaError {
    constructor(m) {
        super(m, CHAIN_ID_ERROR_CODE);
        Object.setPrototypeOf(this, ChainIdError.prototype);
    }
}
exports.ChainIdError = ChainIdError;
class NoAtomicUTXOsError extends AxiaError {
    constructor(m) {
        super(m, NO_ATOMIX_UTXOS_ERROR_CODE);
        Object.setPrototypeOf(this, NoAtomicUTXOsError.prototype);
    }
}
exports.NoAtomicUTXOsError = NoAtomicUTXOsError;
class SymbolError extends AxiaError {
    constructor(m) {
        super(m, SYMBOL_ERROR_CODE);
        Object.setPrototypeOf(this, SymbolError.prototype);
    }
}
exports.SymbolError = SymbolError;
class NameError extends AxiaError {
    constructor(m) {
        super(m, NAME_ERROR_CODE);
        Object.setPrototypeOf(this, NameError.prototype);
    }
}
exports.NameError = NameError;
class TransactionError extends AxiaError {
    constructor(m) {
        super(m, TRANSACTION_ERROR_CODE);
        Object.setPrototypeOf(this, TransactionError.prototype);
    }
}
exports.TransactionError = TransactionError;
class CodecIdError extends AxiaError {
    constructor(m) {
        super(m, CODEC_ID_ERROR_CODE);
        Object.setPrototypeOf(this, CodecIdError.prototype);
    }
}
exports.CodecIdError = CodecIdError;
class CredIdError extends AxiaError {
    constructor(m) {
        super(m, CRED_ID_ERROR_CODE);
        Object.setPrototypeOf(this, CredIdError.prototype);
    }
}
exports.CredIdError = CredIdError;
class TransferableOutputError extends AxiaError {
    constructor(m) {
        super(m, TRANSFERABLE_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, TransferableOutputError.prototype);
    }
}
exports.TransferableOutputError = TransferableOutputError;
class TransferableInputError extends AxiaError {
    constructor(m) {
        super(m, TRANSFERABLE_INPUT_ERROR_CODE);
        Object.setPrototypeOf(this, TransferableInputError.prototype);
    }
}
exports.TransferableInputError = TransferableInputError;
class InputIdError extends AxiaError {
    constructor(m) {
        super(m, INPUT_ID_ERROR_CODE);
        Object.setPrototypeOf(this, InputIdError.prototype);
    }
}
exports.InputIdError = InputIdError;
class OperationError extends AxiaError {
    constructor(m) {
        super(m, OPERATION_ERROR_CODE);
        Object.setPrototypeOf(this, OperationError.prototype);
    }
}
exports.OperationError = OperationError;
class InvalidOperationIdError extends AxiaError {
    constructor(m) {
        super(m, INVALID_OPERATION_ID_CODE);
        Object.setPrototypeOf(this, InvalidOperationIdError.prototype);
    }
}
exports.InvalidOperationIdError = InvalidOperationIdError;
class ChecksumError extends AxiaError {
    constructor(m) {
        super(m, CHECKSUM_ERROR_CODE);
        Object.setPrototypeOf(this, ChecksumError.prototype);
    }
}
exports.ChecksumError = ChecksumError;
class OutputIdError extends AxiaError {
    constructor(m) {
        super(m, OUTPUT_ID_ERROR_CODE);
        Object.setPrototypeOf(this, OutputIdError.prototype);
    }
}
exports.OutputIdError = OutputIdError;
class UTXOError extends AxiaError {
    constructor(m) {
        super(m, UTXO_ERROR_CODE);
        Object.setPrototypeOf(this, UTXOError.prototype);
    }
}
exports.UTXOError = UTXOError;
class InsufficientFundsError extends AxiaError {
    constructor(m) {
        super(m, INSUFFICIENT_FUNDS_ERROR_CODE);
        Object.setPrototypeOf(this, InsufficientFundsError.prototype);
    }
}
exports.InsufficientFundsError = InsufficientFundsError;
class ThresholdError extends AxiaError {
    constructor(m) {
        super(m, THRESHOLD_ERROR_CODE);
        Object.setPrototypeOf(this, ThresholdError.prototype);
    }
}
exports.ThresholdError = ThresholdError;
class SECPMintOutputError extends AxiaError {
    constructor(m) {
        super(m, SECP_MINT_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, SECPMintOutputError.prototype);
    }
}
exports.SECPMintOutputError = SECPMintOutputError;
class EVMInputError extends AxiaError {
    constructor(m) {
        super(m, EVM_INPUT_ERROR_CODE);
        Object.setPrototypeOf(this, EVMInputError.prototype);
    }
}
exports.EVMInputError = EVMInputError;
class EVMOutputError extends AxiaError {
    constructor(m) {
        super(m, EVM_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, EVMOutputError.prototype);
    }
}
exports.EVMOutputError = EVMOutputError;
class FeeAssetError extends AxiaError {
    constructor(m) {
        super(m, FEE_ASSET_ERROR_CODE);
        Object.setPrototypeOf(this, FeeAssetError.prototype);
    }
}
exports.FeeAssetError = FeeAssetError;
class StakeError extends AxiaError {
    constructor(m) {
        super(m, STAKE_ERROR_CODE);
        Object.setPrototypeOf(this, StakeError.prototype);
    }
}
exports.StakeError = StakeError;
class TimeError extends AxiaError {
    constructor(m) {
        super(m, TIME_ERROR_CODE);
        Object.setPrototypeOf(this, TimeError.prototype);
    }
}
exports.TimeError = TimeError;
class NominationFeeError extends AxiaError {
    constructor(m) {
        super(m, NOMINATION_FEE_ERROR_CODE);
        Object.setPrototypeOf(this, NominationFeeError.prototype);
    }
}
exports.NominationFeeError = NominationFeeError;
class AllychainOwnerError extends AxiaError {
    constructor(m) {
        super(m, ALLYCHAIN_OWNER_ERROR_CODE);
        Object.setPrototypeOf(this, AllychainOwnerError.prototype);
    }
}
exports.AllychainOwnerError = AllychainOwnerError;
class BufferSizeError extends AxiaError {
    constructor(m) {
        super(m, BUFFER_SIZE_ERROR_CODE);
        Object.setPrototypeOf(this, BufferSizeError.prototype);
    }
}
exports.BufferSizeError = BufferSizeError;
class AddressIndexError extends AxiaError {
    constructor(m) {
        super(m, ADDRESS_INDEX_ERROR_CODE);
        Object.setPrototypeOf(this, AddressIndexError.prototype);
    }
}
exports.AddressIndexError = AddressIndexError;
class PublicKeyError extends AxiaError {
    constructor(m) {
        super(m, PUBLIC_KEY_ERROR_CODE);
        Object.setPrototypeOf(this, PublicKeyError.prototype);
    }
}
exports.PublicKeyError = PublicKeyError;
class MergeRuleError extends AxiaError {
    constructor(m) {
        super(m, MERGE_RULE_ERROR_CODE);
        Object.setPrototypeOf(this, MergeRuleError.prototype);
    }
}
exports.MergeRuleError = MergeRuleError;
class Base58Error extends AxiaError {
    constructor(m) {
        super(m, BASE58_ERROR_CODE);
        Object.setPrototypeOf(this, Base58Error.prototype);
    }
}
exports.Base58Error = Base58Error;
class PrivateKeyError extends AxiaError {
    constructor(m) {
        super(m, PRIVATE_KEY_ERROR_CODE);
        Object.setPrototypeOf(this, PrivateKeyError.prototype);
    }
}
exports.PrivateKeyError = PrivateKeyError;
class NodeIdError extends AxiaError {
    constructor(m) {
        super(m, NODE_ID_ERROR_CODE);
        Object.setPrototypeOf(this, NodeIdError.prototype);
    }
}
exports.NodeIdError = NodeIdError;
class HexError extends AxiaError {
    constructor(m) {
        super(m, HEX_ERROR_CODE);
        Object.setPrototypeOf(this, HexError.prototype);
    }
}
exports.HexError = HexError;
class TypeIdError extends AxiaError {
    constructor(m) {
        super(m, TYPE_ID_ERROR_CODE);
        Object.setPrototypeOf(this, TypeIdError.prototype);
    }
}
exports.TypeIdError = TypeIdError;
class TypeNameError extends AxiaError {
    constructor(m) {
        super(m, TYPE_NAME_ERROR_CODE);
        Object.setPrototypeOf(this, TypeNameError.prototype);
    }
}
exports.TypeNameError = TypeNameError;
class UnknownTypeError extends AxiaError {
    constructor(m) {
        super(m, UNKNOWN_TYPE_ERROR_CODE);
        Object.setPrototypeOf(this, UnknownTypeError.prototype);
    }
}
exports.UnknownTypeError = UnknownTypeError;
class Bech32Error extends AxiaError {
    constructor(m) {
        super(m, BECH32_ERROR_CODE);
        Object.setPrototypeOf(this, Bech32Error.prototype);
    }
}
exports.Bech32Error = Bech32Error;
class EVMFeeError extends AxiaError {
    constructor(m) {
        super(m, EVM_FEE_ERROR_CODE);
        Object.setPrototypeOf(this, EVMFeeError.prototype);
    }
}
exports.EVMFeeError = EVMFeeError;
class InvalidEntropy extends AxiaError {
    constructor(m) {
        super(m, INVALID_ENTROPY);
        Object.setPrototypeOf(this, InvalidEntropy.prototype);
    }
}
exports.InvalidEntropy = InvalidEntropy;
class ProtocolError extends AxiaError {
    constructor(m) {
        super(m, PROTOCOL_ERROR_CODE);
        Object.setPrototypeOf(this, ProtocolError.prototype);
    }
}
exports.ProtocolError = ProtocolError;
class AllychainIdError extends AxiaError {
    constructor(m) {
        super(m, ALLYCHAIN_ID_ERROR_CODE);
        Object.setPrototypeOf(this, AllychainIdError.prototype);
    }
}
exports.AllychainIdError = AllychainIdError;
class AllychainThresholdError extends AxiaError {
    constructor(m) {
        super(m, ALLYCHAIN_THRESHOLD_ERROR_CODE);
        Object.setPrototypeOf(this, AllychainThresholdError.prototype);
    }
}
exports.AllychainThresholdError = AllychainThresholdError;
class AllychainAddressError extends AxiaError {
    constructor(m) {
        super(m, ALLYCHAIN_ADDRESS_ERROR_CODE);
        Object.setPrototypeOf(this, AllychainAddressError.prototype);
    }
}
exports.AllychainAddressError = AllychainAddressError;
//# sourceMappingURL=data:application/json;base64,